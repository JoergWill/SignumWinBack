<?xml version="1.0"?>
<doc>
<assembly>
<name>
WinBackAddin
</name>
</assembly>
<members>
<member name="T:WinBack.My.Resources.Resources">
<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.ResourceManager">
<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Culture">
<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Admin_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Admin_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.DatenRueckSicherung_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.DatenRueckSicherung_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.DatenSicherung_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.DatenSicherung_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.EditKonfig_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.EditKonfig_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Excel_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Excel_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.HakenGlb_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.HakenGrn_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.HakenRot_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.IconCancel_24x24">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.IconDelete_24x24">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.IconReload_24x24">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.IconSave_24x24">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.IconSaveAs_24x24">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.KreuzRot">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.LinienAutoInstall_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.LinienBearbeiten_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.LinienLoeschen_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.LinienNeu_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.ListUndLabel_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.ListUndLabel_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainArtikel_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainArtikel_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainChargen_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainChargen_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainLinien_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainLinien_45x34">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainProduktionsPlanung_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainProduktionsPlanung_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainRezept_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainRezept_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainRohstoffe_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainRohstoffe_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStammdaten_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStammdaten_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikChargen_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikChargen_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikRezepte_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikRezepte_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikRohstoffe_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainStatistikRohstoffe_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainSync_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainSync_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainUser_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.MainUser_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RezeptDetails_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RezeptDruckenListe_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RezeptHinweise_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RezeptHistorie_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RezeptListe_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RohstoffeDetails_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RohstoffeParameter_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.RohstoffeVerwendung_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.StatusStripBackground">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.This">
<summary>
  Sucht eine lokalisierte Zeichenfolge, die $this ähnelt.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UpdateDataBase_16x16">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UpdateDataBase_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UserGruppen_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UserListe_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UserNeu_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.UserPasswd_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="P:WinBack.My.Resources.Resources.Zoom_32x32">
<summary>
  Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
</summary>
</member>
<member name="T:WinBack.wb_GridCalendarColumn">
 <summary> 
 Provides a DataGridView column which presents date fields in a drop down 
 Calendar control. Editing capabilities are in the class CalendarEditingControl 
 within this class module. 
 </summary> 
 <remarks> 
  
 Originally from MSDN 
 http://msdn.microsoft.com/en-us/library/7tas5c80.aspx 
  
 Kevininstructor modified by adding the ability to alter the format via CalendarColumn.DateFormat 
 </remarks> 
</member>
<member name="M:WinBack.wb_GridCalendarColumn.Clone">
 <summary> 
 </summary> 
 <returns></returns> 
 <remarks> 
 kevininstructor 
 This is needed to persist our custom property DateFormat 
 </remarks> 
</member>
<member name="T:WinBack.CalendarEditingControl">
 <summary> 
 Provides Calendar popup within the GridView. 
 </summary> 
 <remarks></remarks> 
</member>
<member name="M:WinBack.wb_AktSysKonfig.#cctor">
 <summary>
 Liest die freigegebenen Module aus der Tabelle ItemParameter.
 Die System-Konfiguration wird gespeichert unter User-Gruppe -1
 </summary>
</member>
<member name="M:WinBack.wb_AktSysKonfig.SysKonfigOK(System.String)">
 <summary>
 Globale System-Konfiguation.
 
 Unabhängig vom angemeldeten Benutzer werden nicht lizensierte Elemente ausgeblendet
 (User-Gruppe -1)
 </summary>
 <param name="Tag"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_ArrayGridView.InitGrid">
 <summary>
 Grundeinstellungen des DataGridView
 vor der Zuweisung von Array-Daten
 </summary>
</member>
<member name="M:WinBack.wb_SyncUser_OrgaBack.MitarbeiterHatProduktionsFiliale(System.String)">
 <summary>
 Zerlegt das Datenbankfeld 'Filialzuordnung' aus der Tabelle dbo.Mitarbeiten in einzelne Strings mit der
 Filial-Nummer. Ist eine der Filial-Nummern eine Produktions-Filiale (Typ=4) wird True zurückgegeben
 ansonsten False
 </summary>
 <param name="Filialzuordnung">String - alle Filialen den der Mitarbeiter zugeordnet ist als Kommas-separierter String</param>
 <returns>True wenn dre Mitarbeiter der Produktion zugeordnet ist</returns>
</member>
<member name="P:WinBack.wb_BestellDatenSchritt.SollwertTeilungText">
 <summary>
 Der Sollwert-Teilung-Text setzt sich zusammen aus Anzahl der Lose, LosArt und Losgröße
 Der String wird aus 3 Werten zusammengesetzt und formatiert.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_BestellDatenSchritt.MsSQLdbRead_Fields(System.String,System.Object)">
 <summary>
 Aufteilen des SQL-Resultset nach Spalten-Namen auf die Objekt-Eigenschaften
 
 [dbo].[pq_ProduktionsPlanung]
   FilialNr                  / 1
   LieferDatum               / 20180713
   TourNr                    / 0
   ArtikelNr                 / 267
   Einheit                   / 0
   Farbe                     / 0
   Groesse                   / NULL
   BedarfMenge               / 4000,0000
   Bezeichnung               / Mehrkornbrötchen
   FrosterBestand            / 0,0000
   FrosterMeldeBestand       / 0,0000
   FrosterMaxBestand         / 0,0000
   Produktionsmenge          / 4000,0000
   AnzahlVorschlag           / 4000,0000
   AnzahlLoseVorschlag       / 4000,0000
   Losgroesse                / 1,0000 (Stück)
   LosArt                    / 1 (Blech)
   FrosterEntnahme           / 0,0000
   FrosterEinlagerung        / 0,0000
   PlanungsStatus            / 0
   
 </summary>
 <param name="Name">String - Spalten-Name aus Datenbank</param>
 <param name="Value">Object - Wert aus Datenbank</param>
 <returns></returns>
</member>
<member name="T:WinBack.wb_ChangeLog">
 <summary>
 Schreibt alle Änderungen in einem Objekt in eine dynamische Liste.
 
 </summary>
</member>
<member name="P:WinBack.wb_ChangeLog.ChangeLogAktiv">
 <summary>
 Logging aktiv ja/nein
 </summary>
 <returns>Logging aktiv</returns>
</member>
<member name="M:WinBack.wb_ChangeLog.ChangeLogClear">
 <summary>
 ChangeLog löschen. Mit dem Löschen wird das Logging aktiviert
 </summary>
</member>
<member name="M:WinBack.wb_ChangeLog.ChangeLogAdd(WinBack.wb_Global.LogType,System.Int32,System.String,System.String)">
 <summary>
 Vergleicht die Werte von OldValue und NewValue. Wenn sich die Werte unterscheiden, wird
 ein Eintrag im Change-Log hinzugefügt. Der Änderungs-Report kann über GetLogReport abgerufen werden
 </summary>
 <param name="Typ">WinBack Log-Type (Stammdaten)</param>
 <param name="Prm">Parameter-Nummer</param>
 <param name="OldValue">Ursprünglicher Wert (aus DatenBank/Objekt ...)</param>
 <param name="NewValue">Neuer Wert aus (Cloud/Eingabe)</param>
 <returns>Gibt den neuen Wert zurück</returns>
</member>
<member name="M:WinBack.wb_ChangeLog.ChangeLogAdd(WinBack.wb_Global.LogType,System.Int32,System.Double,System.Double,System.String)">
 <summary>
 Vergleicht die Werte von OldValue und NewValue. Wenn sich die Werte unterscheiden, wird
 ein Eintrag im Change-Log hinzugefügt. Der Änderungs-Report kann über GetLogReport abgerufen werden
 </summary>
 <param name="Typ">WinBack Log-Type (Parameter/Nährwerte)</param>
 <param name="Prm">Parameter-Nummer</param>
 <param name="OldValue">Ursprünglicher Wert (aus DatenBank/Objekt ...)</param>
 <param name="NewValue">Neuer Wert aus (Cloud/Eingabe)</param>
 <param name="Format">Zahlenformat</param>
 <returns>Gibt den neuen Wert zurück</returns>
</member>
<member name="M:WinBack.wb_ChangeLog.ChangeLogAdd(WinBack.wb_Global.LogType,System.Int32,WinBack.wb_Global.AllergenInfo,WinBack.wb_Global.AllergenInfo)">
 <summary>
 Vergleicht die Werte von OldValue und NewValue. Wenn sich die Werte unterscheiden, wird
 ein Eintrag im Change-Log hinzugefügt. Der Änderungs-Report kann über GetLogReport abgerufen werden
 </summary>
 <param name="Typ">WinBack Log-Type (Allergene)</param>
 <param name="Prm">Parameter-Nummer</param>
 <param name="OldValue">Ursprünglicher Wert (aus DatenBank/Objekt ...)</param>
 <param name="NewValue">Neuer Wert aus (Cloud/Eingabe)</param>
 <returns>Gibt den neuen Wert zurück</returns>
</member>
<member name="M:WinBack.wb_ChangeLog.ChangeLogReport(System.Boolean)">
 <summary>
 Gibt alle Änderungen seit dem letzten ChangeLogClear aus.
 Per Default werden nur die in der Datenbank aktivierten Parameter ausgegeben.
 Nach der Ausgabe wird das Logging deaktiviert.
 </summary>
 <param name="ReportAll">Gibt alle Änderungen aus, auch die nicht aktiven Parameter</param>
 <returns>(String) Änderungen</returns>
</member>
<member name="T:WinBack.wb_DataGridViewVerwendung">
 <summary>
Ableitung der Klasse wb_DataGridView.
Anzeige der Rohstoff-Verwendung in Rezepturen
 </summary>
</member>
<member name="P:WinBack.wb_Charge.TeigGewicht">
 <summary>
 Teiggewicht (Rezept-Gesamtgewicht) in kg
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.StkGewicht">
 <summary>
 Stückgewicht (nass) in Gramm.
 Wenn sich das Sückgewicht ändert, wird die Chargen-Größe in kg angepasst, so dass die Stückzahl konstant bleibt.
 (In WinBack-Office kann umgeschaltet werden)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.MengeInkg">
 <summary>
 Chargengröße in kg als formatierter String. 
 Bei Änderung der Chargengröße(kg) werden die Werte für Stk und Prozent neu berechnet wenn Teiggröße und Stückgewicht bekannt sind.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.fMengeInkg">
 <summary>
 Chargengröße in kg als Double.
 Wird zur Berechnung der Chargengrößen verwendet
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.cMengeInkg">
 <summary>
 Chargengröße in kg als Double gerundet auf 3 Nachkomma-Stellen.
 Wird für Vergleich der Min/Max/Opt-Charge.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.MengeInProzent">
 <summary>
 Chargenröße in Prozent der Teigmenge als formatierter String. 
 Bei Änderung der Chargengröße(%) werden die Werte für Stk und kg neu berechnet wenn Teiggröße und Stückgewicht bekannt sind.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.fMengeInProzent">
 <summary>
 Chargengröße in Prozent als Double.
 Wird zur Berechnung der Chargengrößen verwendet
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.MengeInStk">
 <summary>
 Chargengröße in Stk als formatierter String. 
 Bei Änderung der Chargengröße(Stk) werden die Werte für kg und % neu berechnet wenn Teiggröße und Stückgewicht bekannt sind.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Charge.fMengeInStk">
 <summary>
 Chargengröße in Prozent als Double.
 Wird zur Berechnung der Chargengrößen verwendet
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Charge.CalcMengeInkg">
 <summary>
 Chargengröße in [kg] aus Menge in Stk und Stückgewicht[gr] neu berechnen
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Charge.CalcMengeInProzent">
 <summary>
 Chargengröße in [%] aus Teig-Gewicht (Rezeptgröße) und Chargengröße in [kg] neu berechnen
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Charge.CalcMengeInStk">
 <summary>
 Chargengröße in [Stk] aus Chargengröße in [kg] und Stückgewicht [gr] neu berechnen
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Charge.ValuesChanged">
 <summary>
 Event - die Werte der Chargengrößen haben sich geändert.
 </summary>
</member>
<member name="M:WinBack.wb_DockBarPanelShared.SetFormBoundaries(System.Windows.Forms.Form,System.String)">
 <summary>
 Liest die zuletzt gespeicherte Fenster-Position aus der winback.ini und setzt die entsprechenden 
 Parameter im übergebenen Fenster.
 Der File-Name der letzten aktuellen Dock-Bar-Konfiguration wird im Tag-Objekt gespeichert !!
 </summary>
 <param name="xForm"></param>
 <param name="IniSektion"></param>
</member>
<member name="P:WinBack.wb_Sync.Case_01">
 <summary>
 Die WinBack.Bezeichnung ist leer.
     - wb_Global.SysncState.WinBackWrite - Datensatz ist nur in OrgaBack vorhanden und muss in WinBack geschrieben werden
     - wb_Global.SysncState.WinBackMiss  - Datensatz ist nur in OrgaBack vorhanden - Fehlt in WinBack, KEIN Update
 </summary>
</member>
<member name="P:WinBack.wb_Sync.Case_10">
 <summary>
 Die OrgaBack-Bezeichnung ist leer
     - wb_Global.SysncState.OrgaBackWrite - Datensatz ist nur in WinBack vorhanden und muss in OrgaBack geschrieben werden
     - wb_Global.SysncState.OrgaBackMiss  - Datensatz ist nur in WinBack vorhanden - Fehlt in OrgaBack, KEIN Update
 </summary>
</member>
<member name="P:WinBack.wb_Sync.Case_11">
 <summary>
 Die Nummern sind identisch, aber beide Bezeichnungen sind unterschiedlich.
     - wb_Global.SysncState.OrgaBackUpdate   - Datensatz ist in beiden Datenbanken vorhanden und muss in OrgaBack aktualisiert werden
     - wb_Global.SysncState.WinBackUpdate    - Datensatz ist in beiden Datenbanken vorhanden und muss in WinBack aktualisiert werden
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam200.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam200_Global">
 <summary>
 Ermittlung der Parameter für die Produkt-Information
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam200_Global.ktTyp200Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam200_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam200_Global.kt200Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_KomponParam201.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam201_Global">
 <summary>
 Ermittlung der Parameter für die Produkt-Information
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam201_Global.ktTyp201Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam201_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam201_Global.kt201Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_KomponParam202.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam202_Global">
 <summary>
 Ermittlung der Parameter für die Kalkulation
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam202_Global.ktTyp202Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam202_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam202_Global.kt202Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_KomponParam210.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam210_Global">
 <summary>
 Ermittlung der Parameter für die Froster(Produktion)
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam210_Global.ktTyp210Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam210_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam210_Global.kt210Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_KomponParam220.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam220_Global">
 <summary>
 Ermittlung der Parameter für die Gare(Produktion)
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam220_Global.ktTyp220Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam220_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam220_Global.kt220Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_KomponParam300.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
     
 SQL_Anweisung REPLACE INTO RohParams (RP_Ko_Nr, RP_Typ_Nr, RP_ParamNr, RP_Wert, RP_Kommentar) VALUES (...)
 
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam300_Global">
 <summary>
 Ermittlung der Parameter für die Produktion
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam300_Global.ktTyp300Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam300_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam300_Global.kt300Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 300, KT_ParamNr = p)
  - Bezeichnung      Parameter-Bezeichnung (Produktions-Steuerung)
  - Einheit          Einheit
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp300Param</returns>
</member>
<member name="M:WinBack.wb_Linien_Global.#cctor">
 <summary>
 Array Liniengruppen aufbauen
 Array Linien aufbauen
 </summary>
</member>
<member name="M:WinBack.wb_Linien_Global.GetOrgaBackOrte">
 <summary>
 Kopiert alle Backorte aus OrgaBack in die Tabelle winback.Liniengruppen. 
 Der Backort steht in OrgaBack in Artikel-Multifunktionsfeld (Auswahlfeld) zum Artikel
 
 Die Auswahlfeld-Inhalte stehen in der Tabelle dbo.ArtikelMultifunktionsfeld mit Gruppen-Nr=3
 Zur Linien-Nummer wird in WinBack ein Offset(100) dazu addiert)
 </summary>
</member>
<member name="M:WinBack.wb_Linien_Global.GetBezeichnung(System.Int32)">
 <summary>
 Gibt die Bezeichnung der Liniengruppe zurück
 </summary>
 <param name="LinienGruppe"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Linien_Global.GetLinieFromLinienGruppe(System.Int32)">
 <summary>
 Gibt die erste Produktions-Linie der Liniengruppe zurück.
 </summary>
 <param name="LinienGruppe"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Linien_Global.GetLinienGruppeFromLinie(System.Int32)">
 <summary>
 Gibt die erste Liniengruppe zurück, welche die übergegebene Linie enthält
 </summary>
 <param name="Linie"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Linien_Global.GetFiliale(System.Int32)">
 <summary>
 Gibt die OrgaBack Produktions-Filiale zur WinBack-Linie zurück
 </summary>
 <param name="Linie"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_MinMaxOptCharge.Invalidate">
 <summary>
 Alle Werte mit Null initialisieren
 </summary>
</member>
<member name="M:WinBack.wb_MinMaxOptCharge.CheckMinCharge">
 <summary>
 Der Wert für die Minimal-Charge hat sich geändert: 
     - Prüfen ob die Minimal-Charge kleiner als Optimal und/oder Maximal-Charge ist
 </summary>
</member>
<member name="M:WinBack.wb_MinMaxOptCharge.CheckOptCharge">
 <summary>
 Der Wert für die Optimal-Charge hat sich geändert: 
     - Prüfen ob die Optimal-Charge kleiner als Minimal-Charge oder größer als Maximal-Charge ist
 </summary>
</member>
<member name="M:WinBack.wb_MinMaxOptCharge.CheckMaxCharge">
 <summary>
 Der Wert für die Maximal-Charge hat sich geändert: 
     - Prüfen ob die Maximal-Charge kleiner als Minimal-Charge oder kleiner als Optimal-Charge ist
 </summary>
</member>
<member name="M:WinBack.wb_AktUser.SetUserRechte(System.Windows.Forms.Control)">
 <summary>
 Blendet die einzelnen Elemente abhängig von den User-Rechten der Gruppe ein bzw. aus
 Alle Controls mit Tag ungleich 0 werden bearbeitet.
 In wb_AktSysKonfig.SysKonfigOK() steht die globale System-Konfiguration (User-Gruppe -1)
 
 Die Rechte für die einzelnen Gruppe kommen aus der Tabelle winback.ItemParameter(IP_ItemTyp=2)
 Die TagNummer der Controls ist winback-ItemParameter.IP_ItemID + 100
 
      IP_ItemID           Tag
 --+-------------------+-------+-------------------------
      0 = Produktion      100
      1 = Chargen         101
      2 = Artikel         102
      3 = Rezepte         103
      4 = Material        104
      5 = Service         105
      6 = Installation    106
      7 = Hilfe           107
      
      IP_ItemID           Tag
 --+-------------------+-------+-------------------------
      10 = Rezepte ReadOnly
      11 = Rohstoffe ReadOnly
      12 = Rohst.Flags ändern
      13 = Rzpt.V1 readonly
      14 = Im Rezept nur spezielle Rohstoffe ändern
      
      Module WinBack-Büro
 --+-------------------+-------+-------------------------
      20 = Benutzerverw    120
      21 = Vnc             121
      22 = Statistik       122
      23 = Rezepthistorie  123
      24 = Material Import 124
      25 = Excel Export    125
      26 = Bakelink        126
      27 = Bestellwesen    127
      28 = Inhalts-Stoffe  128
      29 = Cloud           129 (ohne Recht 29 Cloud nur mit Einschränkungen)
      30 = Prod.Planung    130
      
 </summary>
 <param name="m_Control"></param>
</member>
<member name="T:WinBack.wb_nwtUpdateArtikel">
 <summary>
 Erzeugt eine Liste aller Rezepturen die eine Komponente X enthalten (Verwendung Komponente)
 Alle Elemente dieser Liste werden nacheinander neu berechnet (Rezept.Rezeptschritte)
 Mit der Verwendung der Rezepte in Artikeln werden alle verknüpften Artikel(Komponenten) aktualisiert
 </summary>
</member>
<member name="M:WinBack.wb_nwtUpdateArtikel.UpdateNext(System.Int32,System.Boolean@)">
 <summary>
 Sucht die nächst folgende Komponente (Artikel/Rohstoff mit Rezeptur) sortiert nach KO_Nr 
 aus der Datenbank. Dabei werden nur Datensätze berücksichtigt, die als Update markiert sind.
 Einlesen der Komponenten-Daten in ein Komponenten-Objekt
 Berechnen der Nährwerte der Rezeptur
 
 Nachdem Nährwerte und Zutatenliste berechnet sind
 </summary>
 <returns>True wenn der Datensatz aktualisiert wurde</returns>
</member>
<member name="M:WinBack.wb_Sql_FindServerIP.GetWinBackIP">
 <summary>
 Scannt alle IP-Adressen im Netzwerk nach MySQL-Ports
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.PingWaiter">
 <summary>
 Führt den eigentlichen Verbindungs-Versuch durch.
 Erzeugt einen Thread, der in Hintergrund läuft und per Ping versucht, den Server
 zu erreichen. Nach TimeOut oder Exception wird der Task beendet.
 
 War der Verbindungs-Versuch erfolgreich wird versucht, die Ports 3305 und 5901 zu
 erreichen. Sind beide Ports offen, handelt es sich um einen WinBack-Server.
 </summary>
</member>
<member name="T:WinBack.wb_Finalizer_Shared">
 <summary>
 Finalize wird aufgerufen, wenn die Applikation (OrgaSoft) beendet wird.
     Im Log-File werden die letzten Einträge gesichert und die Datei wird geschlossen.
     
 Implement the “static finalizer” idiom to remove dispose the resource at the end of the application lifetime
 aus https://stackoverflow.com/questions/5633527/how-to-dispose-shared-variable-in-vb-net
 </summary>
</member>
<member name="T:WinBack.WinBack_DockMain">
 <summary>
 Klasse (must Inherit) beeinhaltet alle notwendigen Routinen für die Anzeige der Unterfenster in
 OrgaBack als Docking-Window. Status-Bar mit Schaltflächen für das Layout-Management.
 
 Die einzelnen Layouts werden entsprechen der OrgaBack-Installation im ..\Temp\-Verzeichnis gespeichert.
 Abgeleitete Klassen müssen folgende Prozeduren und Properties überschreiben
 
     -   FormText    (eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn)
     -   FormName    (eindeutiger Name für das Fenster, dient zum Speichern der Einstellungen)
     
 </summary>
</member>
<member name="P:WinBack.WinBack_DockMain.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.WinBack_DockMain.wbBuildDocContent(System.String)">
 <summary>
 Stellt die Dock-Panel-Fensterkonfiguration wieder her. Wird von LoadDockBarConfig aufgerufen.
 
 </summary>
 <param name="persistString"> String - Name Fenster-Objekt</param>
 <returns>Form - Fenster-Form-Objekt</returns>
</member>
<member name="M:WinBack.WinBack_DockMain.SetDefaultLayout">
 <summary>
 Default Layout-Konfiguration (wenn alles schief geht). Wird von LoadDockBarConfig() aufgerufen
 wenn kein gültiges Layout gefunden wurde
 </summary>
</member>
<member name="P:WinBack.WinBack_DockMain.LayoutFilename">
 <summary>
 Die Information kommt aus der winback.ini und wird in der Routine wb_Konfig.SetFormBoundaries ausgelesen (in wb_Main_Menu)
 </summary>
 <returns>String - Layout-Filename</returns>
</member>
<member name="M:WinBack.WinBack_DockMain.SaveDockBarConfig(WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 DockBar-Konfiguration sichern
     Diese Einstellungen werden in wb_Main_Menu gelesen und verarbeitet
 </summary>
</member>
<member name="M:WinBack.WinBack_DockMain.LoadDockBarConfig">
 <summary>
 Läd die Dock-Panel-Konfiguration aus der Konfiguration-Datei (*.xml). Die Konfiguration wird 
 über SaveToXml gesichert.
 </summary>
</member>
<member name="M:WinBack.WinBack_DockMain.GetLayoutFileNames">
 <summary>
 Füllt die ListBox cbLayouts mit den Layout-Bezeichnungen. Die Bezeichnungen werden aus den FormNamen
 gebildet.
 </summary>
</member>
<member name="M:WinBack.WinBack_DockMain.cbLayouts_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 Die Auswahl in der Drop-Down-Liste hat sich geändert. Neues Layout laden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.WinBack_DockMain.BtnReload_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Reload". Layout neu aus Datei laden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.WinBack_DockMain.BtnSave_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Save". Das Layout wird unter dem aktuellen Namen lokal gespeichert.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.WinBack_DockMain.BtnSaveAs_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Save As". Öffnet das Fenster DockPanelConfigSaveAs. Auswahl des Layout-Namens
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.WinBack_DockMain.ESaveAs_Click(System.Object,System.String,WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 Speichert das Layout unter dem angegebene  Namen.
 </summary>
 <param name="sender"></param>
 <param name="FileName"></param>
 <param name="DefaultPath"></param>
</member>
<member name="M:WinBack.WinBack_DockMain.BtnDelete_Click(System.Object,System.EventArgs)">
 <summary>
  Button "Delete". Löscht das ausgewählte Layout Lokal und Global.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:WinBack.WinBack_DockMain.DkPnlConfigFileName(WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 Erzeugt den File-Namen für die Konfig-Datei aus Layout-File-Name und Fom-Name.
 Ohne Angaben wird der lokale Pfad zurückgegeben (..\Temp\xx, wobei xx die Arbeitsplatz-Nummer ist).
 Optional der Globale-Pfad (..\Temp\00)
 </summary>
 <param name="DefaultPath"></param>
 <returns></returns>
</member>
<member name="M:WinBack.WinBack_DockMain.DkPnlConfigName(System.String,System.String)">
 <summary>
 Extrahiert den Layout-Namen aus dem File-Namen der Config-Datei.
 Wenn der Layout-Name nicht zum Form-Namen passt, wird ein Leerstring zurückgegeben.
 </summary>
 <param name="FileName"></param>
 <param name="FormName"></param>
 <returns></returns>
</member>
<member name="M:WinBack.WinBack_DockMain.GetDkPnlConfigNameList(System.String,System.String)">
 <summary>
 Erzeugt eine Liste aller zum Form-Namen passenden Konfigurations-Namen
 </summary>
 <param name="DirName"></param>
 <param name="FormName"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_KomponParam301.#ctor">
 <summary>
 Nach der Initialisierung sind die Nährwerte nicht berechnet
 </summary>
</member>
<member name="P:WinBack.wb_KomponParam301.IsCalculated">
 <summary>
 Gibt False zurück, wenn das Array leer bzw. noch nicht berechnet ist (Lesen aus DB erforderlich)
 True, wenn Daten vorhanden sind.
 </summary>
 <returns>Boolean - Nährwerte sind ermittelt und berechnet</returns>
</member>
<member name="P:WinBack.wb_KomponParam301.AllergenListe_C">
 <summary>
 Kommagetrennte Liste aller Allergene (Volltext) die enthalten sind
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_KomponParam301.AllergenListe_T">
 <summary>
 Kommagetrennte Liste aller Allergene (Volltext) die in Spuren vorkommen
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_KomponParam301.AddNwt(WinBack.wb_KomponParam301@,System.Double)">
 <summary>
 Addiert alle Nährwerte und Allergene zum übergebenen KomponentenParameter-Array
 Die Bezeichnungen der fehlerhaften Komponenten werden aneinander gehängt
 </summary>
 <param name="_ktTyp301"></param>
</member>
<member name="M:WinBack.wb_KomponParam301.AddNwtAllergen(WinBack.wb_Global.AllergenInfo,WinBack.wb_Global.AllergenInfo)">
 <summary>
 Addiert die Allergen-Info. Bei der Addition wird der jeweils größere Wert zurückgegeben.
 Die Reihenfolge der Kontanten in wb_global entspricht der Reihenfolge der Wertigkeit.
 </summary>
 <param name="Allergen1"></param>
 <param name="Allergen2"></param>
</member>
<member name="M:WinBack.wb_KomponParam301.MySQLdbUpdate(System.Int32,WinBack.wb_Sql@)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle winback.RohParams
     RP_Ko_Nr
     RP_Typ_Nr
     RP_ParamNr
     RP_Wert
     RP_Kommentar
     RP_Timestamp
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_KomponParam301.MsSQLdbUpdate(System.String,System.Int32,WinBack.wb_Sql)">
 <summary>
 Update aller geänderten Komponenten-Parameter in Tabelle 
 
 [dbo].[ArtikelNaehrwerte]
     [ArtikelNr]
     [Einheit]
     [Farbe]                         immer 0
     [Groesse]                       immer NULL
     [StuecklistenVariantenNr]
     [NaehrwertNr]
     [Menge]
     
 [dbo].[ArtikelAllergene
     [ArtikelNr]
     [StuecklistenVariantenNr]
     [AllergenNr]
     [Kennzeichnung]
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Komponente.Nummer">
 <summary>
 Rohstoff/Artikel-Nummer (alpha-numerisch)
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.GetProduktionsDaten">
 <summary>
 Daten für die Produktion dieser Komponente ermitteln. 
     Teig-Rezept aus Rezept-im-Rezept-Struktur
     Liniengruppe aus RohParams(5)
     Artikel-Rezept aus RohParams(6)
 </summary>
</member>
<member name="P:WinBack.wb_Komponente.ProduktionsStufe">
 <summary>
 Standard-Komponente für Produktions-Stufen.
 Es wird versucht, die erste Komponente mit der passenden Komponenten-Type aus dem Komponenten-Stamm zu lesen. Wenn keine
 passende Komponente gefunden wurde, wird ein Dummy neu angelegt.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.Invalidate">
 <summary>
 Objekt ist ungültig. Vor der nächsten Verwendung muss wieder neu eingelesen werden.
 </summary>
</member>
<member name="M:WinBack.wb_Komponente.UpdateDB">
 <summary>
 Speichert alle geänderten Komponenten-Daten in der Datenbank
     Stammdaten  (Tabelle Komponenten)
     Teigchargen (Tabelle Rezeptur)
 </summary>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbCanBeDeleted(System.Int32,System.String)">
 <summary>
 Prüft ob der Rohstoff/Artikel noch verwendet wird. (Prüfung ob Löschen zulässig ist)
 
 Abhängig von der Komponenten-Type wird geprüft ob:
     Artikel     -   Verwendung in Arbeits-Rezepte-Tabelle
     Rohstoff    -   Verwendung in Arbeits-Rezepte-Tabelle
                     Verwendung in Rezeptschritte-Tabelle
 </summary>
 <returns>False - Rohstoff/Artikel wird verwendet
 True - Rohstoff/Artikel wird nicht mehr verwendet (kann gelöscht werder)</returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLIsUsedInProduction(System.Int32)">
 <summary>
 Ermittelt die Anzahl der Datensätze in der Tabelle wbdaten.ArbRzSchritte mit der übergebenen Komponenten-Nummer
 Ist die Anzahl der Datensätze gleich Null, wird True zurückgegeben sonst False.
 </summary>
 <param name="InterneKomponentenNummer">Integer - Interne Komponenten-Nummer</param>
 <returns>Boolean - Löschen ist erlaubt</returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLIsUsedInRecipe(System.Object)">
 <summary>
 Ermittelt die Anzahl der Datensätze in der Tabelle winback.RezeptSchritte mit der übergebenen Komponenten-Nummer
 Ist die Anzahl der Datensätze gleich Null, wird True zurückgegeben sonst False.
 </summary>
 <param name="InterneKomponentenNummer">Integer - Interne Komponenten-Nummer</param>
 <returns>Boolean - Löschen ist erlaubt</returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbSetMarker(WinBack.wb_Global.ArtikelMarker)">
 <summary>
 Markiert die aktuelle Komponente (Update Nährwert-Info notwendig oder Nährwertinfo fehlerhaft)
 </summary>
 <param name="Marker"></param>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbSetMarkerRzptListe(WinBack.wb_Global.ArtikelMarker)">
 <summary>
 Markiert alle Rohstoffe(Komponenten), die mit Rezepturen verknüpft sind, welche die Komponente
 enthalten. (Update Nährwert-Info notwendig oder Nährwertinfo fehlerhaft)
 
 Die einfache Variante UPDATE mit INNER JOIN funktioniert mit MySQL 3.2 nicht !!
 deshalb muss zunächst eine Liste aller Rezepturen erzeugt werden, welche die aktuelle Komponente enthalten
 Anhand dieser Liste werden dann alle Artikel markiert, die ein Rezept aus der Liste referenzieren.
 
 </summary>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbDelete">
 <summary>
 Löscht alle Einträge zur aktuellen Komponenten-Nummer aus der WinBack-Datenbank
     - winback.Lagerorte     (LG_Ort)
     - winback.Lieferungen   (LF_LG_Ort)
     - winback.Komponenten   (KO_Nr)
     - winback.KomponParams  (KO_Nr)
     - winback.Hinweise2     (KO_Nr)
     - winback.RohParams     (KO_Nr)
     
 Die Datenfelder KO_Nr und KA_Lagerort müssen in MySQLdbRead_StammDaten vorab gelesen worden sein.
 (Routine MySQLdbCanBeDeleted) 
 </summary>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbNew(WinBack.wb_Global.KomponTypen)">
 <summary>
 Komponenten-Datensatz neu anlegen
 Es werden nur die Komponenten-Nummern (intern/extern) und die Komponenten-Type angelegt.
 Die Komponenten-Bezeichnung ist "Neu angelegt " mit Datum/Uhrzeit
 
 Alle weiteren Komponenten-Daten werden mit MySQLdbUpdate eingetragen.
 </summary>
 <param name="KType">KomponTypen - Komponenten-Type der anzulegenden Komponente</param>
 <returns>Integer - neu anglegte (interne) Komponenten-Nummer</returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbRead(System.Int32,System.String)">
 <summary>
 Liest alle Datenfelder zu der angegebenen Komponenten-Nummer aus der WinBack-Datenbank. Wenn die interne Komponenten-Nummer nicht angegeben ist
 (Kleiner oder gleich Null) dann wird versucht, anhand der Artikel-Nummer den Datensatz zu finden.
 
 Gibt True zurück, wenn der Datensatz gefunden wurde.
 TODO Was ist zu tun, wenn mehr als ein Datensatz gefunden wurde
 TODO Die interne Nummer an OrgaBack zurückschreiben
 </summary>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbRead(MySql.Data.MySqlClient.MySqlDataReader@)">
 <summary>
 Liest alle Datenfelder aus dem aktuellen Datensatz in das Komponenten-Objekt
 Die Daten werden anhand der Feldbezeichnung in die einzelnen Properties eingetragen.
 
 Das letzte Datenfeld ist der TimeStamp und wird NICHT eingelesen, da es Probleme mit
 der Konvertierung von MySQLDateTime in DateTime gibt
 (https://bugs.mysql.com/bug.php?id=87120)
 </summary>
 <param name="sqlReader"></param>
 <returns>True wenn kein Fehler aufgetreten ist</returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbRead_StammDaten(System.String,System.Object)">
 <summary>
 Schreibt den Wert aus Value in die entprechende Property der Klasse. Der Feldname bestimmt das Ziel
 </summary>
 <param name="Name">String - Bezeichnung Datenbankfeld</param>
 <param name="Value">Object - Wert Datenbankfeld(Inhalt)</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbRead_Parameter(System.String,System.Object)">
 <summary>
 Schreibt den Wert aus Value in die entprechende Property der Klasse. Anhand von 
 Parameter-Nummer und Parameter-Typ wird der Wert in das entsprechende Feld
 eingetragen.
 ParamNr und ParamWert müssen definiert sein, bevor der Wert geschrieben werden
 kann!
 </summary>
 <param name="Name">String - Bezeichnung Datenbankfeld</param>
 <param name="Value">Object - Wert Datenbankfeld(Inhalt)</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbUpdate">
 <summary>
 schreibt alle Datenfelder aus dem Komponenten-Objekt mit der angegebenen Komponenten-Nummer in die Datenbank.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MySQLdbUpdate_Parameter(WinBack.wb_Global.ktParam)">
 <summary>
 Schreibt die  WinBack-Komponenten-Parameter in die WinBack-Datenbank. 
 </summary>
 <param name="ktTyp"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MySqldbUpdate_Zutatenliste">
 <summary>
 Sichert die Zutatenliste in der Datenbank
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MsSQLdbUpdate_Parameter(WinBack.wb_Global.ktParam)">
 <summary>
 Schreibt alle Parameter zur Komponente in die OrgaBack-Datenbank(Zugriff über KO_Nr_AlNum!)
     -kt301  dbo.ArtikelNaehrwerte
     
 Vor Beginn der INSERT/UPDATES wird geprüft ob der Artikel in OrgaBack existiert.
 Wenn nicht wird abgebrochen und False zurückgegeben.
 
 </summary>
 <param name="ktTyp"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Komponente.MsSqldbUpdate_Zutatenliste">
 <summary>
 Schreibt die Deklarationstexte in die OrgaBack-Datenbank(Zugriff über KO_Nr_AlNum!)
 Die Daten werden nur geschrieben, wenn sie nicht fixiert sind. Vor dem Schreiben erfolgt immer
 ein Lesezugriff.

 [dbo].[ArtikelDeklarationsTexte]
   ->[ArtikelNr]
   ->[StuecklistenVariantenNr]
   D [LaenderCode] !!!!
   D [SprachenCode]
   ->[AllergenDeklarationEnthalten]
   ->[AllergenDeklarationSpuren]
   ->[AllergenKurzDeklarationEnthalten]
   ->[AllergenKurzDeklarationSpuren]
   [ZusatzstoffDeklaration]
   [ZusatzstoffKurzDeklaration]
   [ZusatzstoffDeklarationUVP]
   [ZusatzstoffDeklarationErgaenzung]
   [ZusatzstoffDeklarationENummern]
   [DeklarationsText]
   ->[Zutaten]
   ->[AllergenDeklarationFix]
   [ZusatzstoffDeklarationFix]
   ->[ZutatenDeklarationFix]
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_KomponParam301_Global">
 <summary>
 Ermittlung der Parameter für Allergene und Nährwerte
 Gibt zu einem spezifischen Parameter p die entsprechenden statischen Werte zurück.
 Vor dem ersten Aufruf wird die Hash-Table aus der Datenbank gelesen und aufgebaut.
 </summary>
</member>
<member name="F:WinBack.wb_KomponParam301_Global.ktTyp301Params">
 <summary>
 Hash-Table mit den statischen Werten für die einzelnen Parameter p
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam301_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle KomponTypen und Einheiten)
 </summary>
</member>
<member name="M:WinBack.wb_KomponParam301_Global.kt301Param(System.Int32)">
 <summary>
 Gibt die statischen Werte für den Parameter p zurück
 Aus der Datenbank KomponTypen (KT_Typ_Nr = 301, KT_ParamNr = p)
  - Bezeichnung      Allergen/Nährwert-Bezeichnung
  - KurzBezeichnung  Bei Nährwerten die Zweitbezeichnung, bei Allergenen der Genitiv
  - Gruppe           Allergen(Nährwert-Gruppe)
  - Einheit          Einheit
  - Feld             Eintrag in Seriendruck-Dokument(Word)
  - Used             Verwendet/Nicht verwendet (Kunden-Spezifisch)
 </summary>
 <param name="p">Interger Parameter-Nummer</param>
 <returns>ktTyp301Param</returns>
</member>
<member name="P:WinBack.wb_nwtCloud.ErrorCode">
 <summary>
 WinBack-Cloud-Connector::GetErrorCode(Array) 
 
 Gibt den Fehler-Code der Abfrage zurück
 </summary>
</member>
<member name="M:WinBack.wb_nwtCloud.GetResult(System.Int32)">
 <summary>
 WinBack-Cloud-Connector::GetResult(Array) 
 
 Gibt das Ergebnis der Abfrage als JSON-String zurück
 </summary>
 <remarks>
 </remarks>
 <param name="Index"> Integer Index des Result-JSON-Objekts</param>
</member>
<member name="M:WinBack.wb_nwtCloud.httpString(System.String,System.String)">
 <summary>
 WinBack-Cloud-Connector::http-Kommando zusammensetzen
 
 Setzt den HTTP-String entsprechend dem angeforderten Kommando zusammen
 und setzt die Anfrage ab
 </summary>
 <param name="cmd"> String Kommando</param>
 <param name="param"> String Kommando-Parameter</param>
</member>
<member name="M:WinBack.wb_nwtCloud.lookupProductName(System.String)">
 <summary>
 WinBack-Cloud-Connector::lookupProduct by article_description
 
 Gibt die Anzahl der Datensätze zurück, deren Name dem Suchtext entspricht
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="ds"> String Suchbegriff Rohstoff-Bezeichnung</param>
</member>
<member name="M:WinBack.wb_nwtCloud.lookupProduct(System.String,System.String)">
 <summary>
 WinBack-Cloud-Connector::lookupProduct by by article And supplier
 
 Gibt die Anzahl der Datensätze zurück, deren Name und Lieferant dem Suchtext entspricht
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="ds"> String Suchbegriff Rohstoff-Bezeichnung</param>
 <param name="lf"> String Suchbegriff Lieferant</param>
</member>
<member name="M:WinBack.wb_nwtCloud.GetProductData(System.String)">
 <summary>
 WinBack-Cloud-Connector::getProductData
 
 Liest das Produktdatenblatt des Rohstoffen mit der angegebenen ID aus den Cloud.
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="id"> String Rohstoff-ID</param>
</member>
<member name="M:WinBack.wb_nwtCloud.GetProductData(System.String,WinBack.wb_Komponente@)">
 <summary>
 Abfrage der Daten aus der WinBack Cloud (Hetzner-Server)
 Das Ergebnis ist ein verschachteltes JSON-Objekt
     {
       "rid": 2502,
       "name":             {"0": "Gouda 48% Reibkäse"},
       "lieferant":        {"0": "Poppinga Käseservice"},
       "deklarationsname": {"0": "{Kuhmilch, Lab}, Salz, Beta Carotin (E 160a), Calciumchlorid (E 509), Kartoffelstärke"},
       "inhalt":           {"1": "358",
                            "2": "1491",
                            "3": "24",
                            "4": "1",
                            "5": "29",
                            "6": "0",
                            "201": "0",
                            "202": "1960",
                            "11": "1",
                            "12": "20",
                            "13": "1",
                            "141": "k",
                            "14": "760",
                            "142": "k",
                            "15": "0",
                            "143": "k",
                            "144": "k",
                            "145": "k",
                            "146": "k",
                            "147": "c",
                            "148": "k",
                            "149": "k",
                            "150": "k",
                            "151": "k",
                            "152": "k",
                            "153": "k",
                            "154": "k"},
       "stufe": 0,
       "aenderungsindex": "20170331094858"
     }
 
 </summary>
 <param name="iD"></param>
 <returns>TimeStamp (DateTime) - Änderungsdatum aus der Cloud</returns>
</member>
<member name="M:WinBack.wb_nwtCloud.DebugResultSet(System.Int32)">
 <summary>
 WinBack-Cloud-Connector::DebugResultSet
 
 Gibt das JSON-Object mit dem angegebene Index als String aus
 </summary>
 <param name="Index"> Integer Anzahl der Datensätze</param>
</member>
<member name="P:WinBack.wb_nwtDatenLink.ErrorCode">
 <summary>
 Datnlink-Connector::GetErrorCode(Array) 
 
 Gibt den Fehler-Code der Abfrage zurück
 </summary>
</member>
<member name="M:WinBack.wb_nwtDatenLink.GetResult(System.Int32)">
 <summary>
 Datenlink-Connector::GetResult(Array) 
 
 Gibt das Ergebnis der Abfrage als JSON-String zurück
 </summary>
 <remarks>
 </remarks>
 <param name="Index"> Integer Index des Result-JSON-Objekts</param>
</member>
<member name="M:WinBack.wb_nwtDatenLink.GetXMLResult">
 <summary>
 Datenlink-Connector::GetXMLResult(Array) 
 
 Gibt das Ergebnis der Abfrage als XML-String zurück
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:WinBack.wb_nwtDatenLink.httpString(System.String,System.String,System.String)">
 <summary>
 Datenlink-Connector::http-Kommando zusammensetzen
 
 Setzt den HTTP-String entsprechend dem angeforderten Kommando zusammen
 und setzt die Anfrage ab
 </summary>
 <param name="cmd"> String Kommando</param>
 <param name="param"> String Kommando-Parameter</param>
 <param name="service"> String</param>
</member>
<member name="M:WinBack.wb_nwtDatenLink.lookupProductName(System.String)">
 <summary>
 Datenlink-Connector::lookupProduct by article_description
 
 Gibt die Anzahl der Datensätze zurück, deren Name dem Suchtext entspricht
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="ds"> String Suchbegriff Rohstoff-Bezeichnung</param>
</member>
<member name="M:WinBack.wb_nwtDatenLink.GetProductData(System.String)">
 <summary>
 Datenlink-Connector::getProductData
 
 Liest das Produktdatenblatt des Rohstoffen mit der angegebenen ID aus den Cloud.
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="id"> String Rohstoff-ID</param>
</member>
<member name="M:WinBack.wb_nwtDatenLink.GetProductData(System.String,WinBack.wb_Komponente@)">
 <summary>
 Abfrage der Daten aus DatenLink
 Das Ergebnis ist ein verschachteltes XML-Objekt
 <!-- 
 <?xml version="1.0" encoding="UTF-8">
 <Datenlink defaultTextLang="DEU" version="1.00" xsischemaLocation="urn:datenlink:specification:1.0 http://entwickler.datenlink.info/schema/specification/1.0/datenlinkXML.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:datenlink:specification:1.0">

     <Header>
         <Created>2013-09-03T08:14:03</Created>
         <Generator>
             <Software> datenlink</Software>
             <Url> http : //www.datenlink.info</Url>
             <Version>1.1</Version>
         </Generator>
         <DataSource>
             <Ressource> datenlink</Ressource>
             <Version>1</Version>
         </DataSource>
     </Header>
     <Manufacturer>
         <CompanyID type = "DATENLINK" > 613cb7a0-e47f-11E3-80E1-d43d7ed6cafe</CompanyID>
     </Manufacturer>

     <Product>
         <ProductName>
             <TextValue> B??KO BiO Weizenschrot mittel</TextValue>
         </ProductName>
         <ProductNumbers>
             <ProductNumber type = "MANUFACTURER" > 102055</ProductNumber>
         </ProductNumbers>
         <ProductVersionIdentifier>
             <ValidFrom>2013-09-03</ValidFrom>
             <LabelingMethod>
                 <TextValue> Zur Zeit keine Differenzierung notwendig</TextValue>
             </LabelingMethod>
             <LabelingValue>
                 <TextValue>...</TextValue>
             </LabelingValue>
         </ProductVersionIdentifier>
     </Product>

     <FoodFacts>
         <DeclarationName key = "0E66905" />
         <NutritionFacts>
             <NutritionFactsBasedOn>
                 <Value unit = "g" > 100</Value>
             </NutritionFactsBasedOn>
             <NutritionFactsItem key="GJ">
                 <Value unit = "kJ" > 1293</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="ZF">
                 <Value unit = "g" > 2.4</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="FS">
                 <Value unit = "g" > 0.34</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="ZK">
                 <Value unit = "g" > 59.5</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="KD">
                 <Value unit = "g" > 0.72</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="ZB">
                 <Value unit = "g" > 10</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="ZE">
                 <Value unit = "g" > 11.4</Value>
             </NutritionFactsItem>
             <NutritionFactsItem key="GMKO">
                 <Value unit = "g" smaller="true">0.01</Value>
             </NutritionFactsItem>
         </NutritionFacts>

         <AllergenLabeling>
             <AllergenList type="EU" containmentType="CONTAINED">
                 <AllergenListItem key="GLUTEN">
                     <AllergenListItem key = "GLUTEN_WHEAT" />
                 </AllergenListItem>
             </AllergenList>
         </AllergenLabeling>
         <IngredientLists>
             <IngredientList>
                 <Ingredient key="1695B8D">
                     <SpecificationList type="FIX">
                         <Specification key = "BIO_PRODUCT" />
                     </SpecificationList>
                 </Ingredient>
             </IngredientList>
         </IngredientLists>
     </FoodFacts>
 </Datenlink> 
 --></summary>
 <param name="iD"></param>
 <returns>TimeStamp (DateTime) - Änderungsdatum aus der Cloud</returns>
</member>
<member name="M:WinBack.wb_nwtDatenLink.GetDatenLinkLieferant(System.String)">
 <summary>
 Auswerten der Lieferanten-Daten (JSON)
 {
     "status":"SUCCESS"
     "data":
         {
             "name":     "BÄKO-Zentrale Süddeutschland eG"
             "id":       "613cb7a0-e47f-11e3-80e1-d43d7ed6cafe"
             "location":
                 {
                     "address":
                         {
                             "street":"Benzstr."
                             "number":"3"
                         }
                     "city":
                         {
                             "zipcode":"68526"
                             "name":"Ladenburg"
                         }
                     "country":
                         {   
                             "iso":"DE"
                             "name":"Deutschland"
                          }
                 }
         }
 }
 </summary>
 <param name="JString"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_nwtDatenLink.getDistributorData(System.String)">
 <summary>
 Datenlink-Connector::getDistributorData
 
 Liest die Lieferantendaten des Rohstoffes mit der angegebenen ID aus den Cloud.
 Die Datensätze können über GetResult abgefragt werden. 
 </summary>
 <param name="id"> String Rohstoff-ID</param>
</member>
<member name="M:WinBack.wb_nwtDatenLink.validateCompanyToken">
 <summary>
 Datenlink-Connector::validateCompanyToken
 
 </summary>
</member>
<member name="M:WinBack.wb_nwtDatenLink.DebugResultSet(System.Int32)">
 <summary>
 Datenlink-Connector::DebugResultSet
 
 Gibt das JSON-Object mit dem angegebene Index als String aus
 </summary>
 <param name="Index"> Integer Anzahl der Datensätze</param>
</member>
<member name="M:WinBack.wb_nwtUpdate.UpdateNext(System.Int32,System.Boolean@)">
 <summary>
 Sucht die nächst folgende Komponente sortiert nach KO_Nr aus der Datenbank
 Einlesen der Komponenten-Daten in ein Komponenten-Objekt
 Abfrage der Nährwert-Daten aus der Cloud (WinBack/Datenlink)
 wenn die Daten aus der Cloud aktueller sind als in der WinBack-Datenbank wird ein Report generiert und
 die Daten werden aktualisiert.
 </summary>
 <returns>True wenn der Datensatz aktualisiert wurde</returns>
</member>
<member name="M:WinBack.wb_nwtUpdate.GetNaehrwerte(System.String,WinBack.wb_Komponente)">
 <summary>
 Abfrage der Nährwerte aus der Cloud
 Abhängig von der ID wird die jeweilige Routine für Abfrage und Dekodierung
 der Nährwert-Daten aufgerufen
 Die Daten werden in nwtDaten eingtragen
 
     DL-xxxx Datenlink
     xxxx    WinBack-Cloud
 </summary>
 <param name="ID"></param>
 <returns>Gibt das Datum der letzten Änderung in der Cloud zurück</returns>
</member>
<member name="M:WinBack.wb_nwtUpdate.GetNaehrwerteHetzner(System.String,WinBack.wb_Komponente)">
 <summary>
 Abfrage der Daten aus der WinBack Cloud (Hetzner-Server)
 Die Daten werden in nwtDaten eingtragen
 
 </summary>
 <param name="iD"></param>
 <returns>TimeStamp (DateTime) - Änderungsdatum aus der Cloud</returns>
</member>
<member name="M:WinBack.wb_nwtUpdate.GetNaehrwerteDatenlink(System.String,WinBack.wb_Komponente)">
 <summary>
 Abfrage der Daten aus DatenLink
 Das Ergebnis ist ein verschachteltes XML-Objekt
 Die Daten werden in nwtDaten eingtragen
 </summary>
 <param name="iD"></param>
 <returns>TimeStamp (DateTime) - Änderungsdatum aus der Cloud</returns>
</member>
<member name="F:WinBack.wb_Produktion._RootProduktionsSchritt">
 <summary>
 Enthält den komplette Produktionsplan als Liste von Produktionschritten (wb_Produktionsschritt).
 Jeder Produktionschritt hat Parent und Child. Die Produktion beginnt am Knoten(0) ohne Parent.
 
     Schritt 0                                            (Child = Schritt 1, Schritt 2...)
         +   Schritt 1               (Parent = Schritt 0)
         +   Schritt 2               (Parent = Schritt 0)
         +   Schritt 3               (Parent = Schritt 0) (Child = Schritt 3.1, Schritt 3.2)
                 +   Schritt 3.1     (Parent = Schritt 3)
                 +   Schritt 3.2     (Parent = Schritt 3)
         +   Schritt 4               (Parent = Schritt 0)
         + ...
         
 Die Anzeige erfolgt im VirtualTree direkt mit der Angabe des Root-Nodes
 </summary>
</member>
<member name="P:WinBack.wb_Produktion.RootProduktionsSchritt">
 <summary>
 Erster (unsichtbarer) Produktions-Schritt (Root-Node)
 </summary>
 <returns>wb_Produktionsschritt - Root-Node des Rezeptes</returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcVorproduktion(WinBack.wb_Produktionsschritt)">
 <summary>
 Berechnet alle Vorproduktions-Chargen.
 Die Funktion interiert über alle Einträge in der Liste Produktions-Schritte und summiert nach Rezeptnummer die 
 Vorproduktions-Chargen. Der Suchlauf erfolgt rekursiv über alle Child-Produktions-Schritte beginnend von Root-Node
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.TeigeZusammenfassen(WinBack.wb_Global.ModusTeigOptimierung)">
 <summary>
 Fasst alle (Rest-)Teige zu einem/mehreren Teigchargen zusammen (Optimierung der Produktions-Liste)
 Die Produktions-Liste ist vorher schon nach TeigNr/Tour/Artikelnr sortiert.
 </summary>
</member>
<member name="M:WinBack.wb_Produktion.TourInfo(System.String,WinBack.wb_Global.ModusTeigOptimierung)">
 <summary>
 Wenn alle Touren zusammengefasst werden - Tour-Info anpassen
 </summary>
 <param name="Tour"></param>
 <param name="Modus"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.AddChargenZeile(System.String,System.Int32,System.Double,WinBack.wb_Global.ModusChargenTeiler)">
 <summary>
 Fügt eine Rezept(Charge) an die bestehende Liste an.
 Der Rezept-Datensatz wird aus der Datenbank eingelesen. Für die Artikelzeile wird ein Dummy-Artikel angelegt.
 </summary>
 <param name="Tour"></param>
 <param name="RzNr"></param>
 <param name="TeigMenge"></param>
 <param name="Modus"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.AddChargenZeile(System.String,System.String,System.Int32,System.Double,WinBack.wb_Global.ModusChargenTeiler,System.Boolean,System.String,System.Double,System.String,System.String)">
 <summary>
 Fügt eine (Artikel)Charge an die bestehende Liste an.
 Der Artikel-Datensatz wird aus der Datenbank eingelesen und als Kopfdatensatz eingefügt. Die Rezeptzeilen werden entsprechend der Chargen-Aufteilung angefügt.
 </summary>
 <param name="Nummer">String - Artikelnummer(alpha)</param>
 <param name="Nr">Integer - interne Artikelnummer</param>
 <param name="Sollmenge_Stk">Double - Sollmenge in Stück</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.GetAuftragsNummer(System.String,System.String)">
 <summary>
 Gibt einen Wert für die Auftrags-Nummer zurück. Ist keine Auftrags-Nummer definiert, wird die Tour zurückgegeben.
 </summary>
 <param name="AuftragsNummer"></param>
 <param name="Tour"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBestellMenge(System.Double,System.Double)">
 <summary>
 Gibt einen Wert für die Bestellmenge zurück. Ist die Bestellmenge undefiniert wird die Bestellmenge gleich der Sollmenge gesetzt.
 </summary>
 <param name="BestellMenge"></param>
 <param name="Sollwert"></param>
 <returns>BestellMenge - Double - Wenn die Bestellmenge undefiniert ist, wird die Sollmenge zurückgegeben</returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcTeigMenge(System.Int32,System.Double,System.Double)">
 <summary>
 Berechnung der Teigmenge aus Stück-Gewicht und Soll-Stückzahl
 Der Backverlust wird prozentual abgezogen.
 </summary>
 <param name="SollStk"></param>
 <param name="StkGewicht"></param>
 <param name="Backverlust"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcChargenMenge(System.Double,System.Double,System.Double,System.Double,WinBack.wb_Global.ModusChargenTeiler,System.Boolean)">
 <summary>
 Berechnung der Chargengrößen abhängig von Min/Max/Optimal
 Charge. Zurückgegeben werden die Anzahl der Optimal- und
 Restchargen und Größe von Optimal/Restchargen.
 
 Modus
     wb_global.XGleiche            '(M1) Aufteilung in gleich große Chargen
     wb_global.NurOptimal          '(00) Aufteilung nur in Optimal-Chargen
     wb_global.OptimalUndRest      '(01) Aufteilung in Optimal- und Rest-Chargen
     wb_global.MaximalUndRest      '(02) Aufteilung in Maximal- und Rest-Chargen
     wb_global.RezeptGroesse       '(09) Aufteilung in Rezept-Größe (keine Chargen angegeben)
     
 Result
     wb_global.OK                  'Chargenaufteilung in Ordnung
     wb_global.EM1                 'Nach Aufteilung in Optimalchargen bleibt eine Restmenge offen, die nicht produziert werden kann
     wb_global.EM2                 'Nach Aufteilung in Optimalchargen wird mehr produziert als gefordert
     wb_global.EM3                 'Nur eine Restcharge kleiner als die Minimalcharge. Muss zusammengefasst werden.
     wb_global.EP1                 'Sollmenge nicht erreicht, Restmenge unterhalb Mindestcharge
     wb_global.EP9                 'Keine Chargengrößen angegeben, Aufteilung nach Rezeptgröße
 
 Wenn das Flag Vorproduktion auf True gesetzt ist, wird
 mindestens eine Charge (je nach Modus Min/Opt) produziert
 damit auf alle Fälle die entsprechende Zeile In der
 Produktionsplanung gesetzt wird.
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="Modus"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBatchM1(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
 <summary>
 Aufteilung in gleiche Chargen mit möglichst großer Chargengröße
 
 Result.Error ist  0 wenn die Sollmenge komplett produziert werden kann.
 Result.Error ist +1 wenn die Anzahl der Chargen reduziert wurde damit die Sollmenge ungefähr erreicht wird.
 Result.Error ist +2 wenn die Chargengröße verringert wurde damit die Sollmenge ungefährt erreicht wird.
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBatch00(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
 <summary>
 Aufteilung in OptimalChargen
 
 Result.Error ist  0 wenn die Sollmenge komplett produziert werden kann.
 Result.Error ist -1 wenn eine Restmenge übrig bleibt
 Result.Error ist -2 wenn mehr produziert wird als gefordert (@V3.0.5)
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBatch01(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
 <summary>
 Aufteilung in Optimal-Chargen und Rest
   
 Result.Error ist  0 wenn die Sollmenge komplett produziert werden kann.
 Result.Error ist -1 Sollmenge kann nicht erreicht werden da die Restcharge die Mindestmenge unterschreitet
 
 Ist das Flag RestKleinerMin gesetzt, wird die Rest-Charge auch dann berechnet, wenn Sie kleiner als die Minimal-Charge ist.
 Dies ist notwendig für die Berechnung der Vorproduktion oder die Kalkulation der bestellten Mengen aus den OrgaBack-Bestellungen,
 da hier sonst Teigmengen verloren gehen können!
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBatch02(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
 <summary>
 Aufteilung in möglichst große Chargen und Rest
 
 CalcBatch01.Result ist  0 wenn die Sollmenge komplett produziert werden kann.
 CalcBatch01.Result ist -1 Sollmenge kann nicht erreicht werden da die Restcharge die Mindestmenge unterschreitet
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.CalcBatch09(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
 <summary>
 Aufteilung nach Rezeptgröße (Maximal-Charge)
 
 CalcBatch09.Result ist immer 9
 </summary>
 <param name="Sollwert"></param>
 <param name="ChargeMin"></param>
 <param name="ChargeMax"></param>
 <param name="ChargeOpt"></param>
 <param name="VorProduktion"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktion.MySQLdbSelect_ArbRzSchritte(System.Int32)">
 <summary>
 Liest alle Datensätze aus wbdaten zur angegeben Tageswechselnummer sortiert nach Produktionsdatum ein 
 </summary>
 <param name="TwNr">Integer Tageswechsel-Nummer</param>
</member>
<member name="M:WinBack.wb_Produktion.MySQLdbRead_Fields(System.String,System.Object)">
 <summary>
 Aufteilen des SQL-Resultset nach Spalten-Namen auf die Objekt-Eigenschaften
 </summary>
 <param name="Name">String - Spalten-Name aus Datenbank</param>
 <param name="Value">Object - Wert aus Datenbank</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Produktionsschritt.CopyFrom(WinBack.wb_Produktionsschritt)">
 <summary>
 Kopiert alle Properties dieser Klasse auf die Properties der übergebenen Klasse.
 Geschrieben werden nur die Properties, die nicht als ReadOnly deklariert sind.
 
 aus: https://stackoverflow.com/questions/531384/how-to-loop-through-all-the-properties-of-a-class

 Dient dazu, die Inhalte eines Produktions-Schrittes auf einen anderen zu kopieren.
 Durch die Schleife über alle Properties ist die Funktion unabhängig von eventuellen Erweiterungen.
 </summary>
 <param name="rs">wb_Produktionsschritt nimmt die Werte der Properties der Klasse auf</param>
</member>
<member name="M:WinBack.wb_Produktionsschritt.CopyFromKomponenten(WinBack.wb_Komponente,System.Int32)">
 <summary>
 Kopiert alle Artikel-Daten in den aktuellen Produktions-Schritt
 </summary>
 <param name="rs">wb_Komponenten hält alle notwendigen Werte der Artikel für die Produktion</param>
</member>
<member name="M:WinBack.wb_Produktionsschritt.CompareTo(System.Object)">
 <summary>
 Sortieren BackListe
 Die einzelnen Produktions-Schritte werden sortiert nach Teig(Rezeptnummer), Artikelnummer und Tour
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.VirtTreeBezeichnung">
 <summary>
 Bezeichnung. Anzeige im VirtualTree
 </summary>
 <returns>String - Bezeichnung</returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.VirtTreeSollwert">
 <summary>
 Sollwert. Anzeige im VitualTree. Unterscheidung anhand der Type:
     -   Artikel-Chargen-Zeilen  Sollmenge in Stück
     -   Rezept-Chargen-Zeilen   Sollmenge in kg
     -   Rezept-Schritte         Sollwert als formatierter Zahlenwert
                                 enthält der Rezept-Sollwert einen Textbaustein, wird kein Sollwert ausgegeben
 
 </summary>
 <returns>String - Sollwert</returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.VirtTreePrintBackZettel">
 <summary>
 Gibt eine boolschen Wert zurück, ob der aktuelle Schritt in ListUndLabel gedruckt werden soll. Bei Dummy-Artikeln
 wird keine Zeile im Report ausgegeben.
 </summary>
 <returns>Flag Zeile in Report drucken</returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.VirtTreePrintTeigListe">
 <summary>
 Gibt eine boolschen Wert zurück, ob der aktuelle Schritt in ListUndLabel gedruckt werden soll. Bei optimierten Zeilen
 wird keine Zeile im Report ausgegeben.
 </summary>
 <returns>Flag Zeile in Report drucken</returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.VirtTreeSumSollwerte">
 <summary>
 Gibt FÜr Artikelzeilen die Summe aller Sollwerte der Child-Steps zurück
 Zur Anzeige der Teigmenge bzw. Teig-Gesamt-Menge in der Backliste
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.SortKriterium">
 <summary>
 Datenfeld für Sortierung der Liste
 enthält LinienGruppe + Teignummer + Artikelnumer + Tour als String, so dass die Sortierung über ein Feld erfolgen kann
 Teignummern und Artikelnummer werden mit führenden Nullen aufgefüllt.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.TeigOptMengekg">
 <summary>
 Anzeige der Teigchargen-Optimalmenge in ListUndLabel
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.TeigOptMengeStk">
 <summary>
 Anzeige der Anzahl der Optimalchargen in ListUndLabel
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.TeigRestMengekg">
 <summary>
 Anzeige der Teigchargen-Restmenge in ListUndLabel
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.TeigRestMengeStk">
 <summary>
 Anzeige der Anzahl der Restchargen in ListUndLabel
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Produktionsschritt.TeigRestMengeProzent">
 <summary>
 Anzeige der Prozentualen Größe der Restteigmenge bezogen auf die Optimalcharge in ListUndLabel
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_Rezept">
 <summary>
 Enthält die komplette Rezeptur als Liste von Rezeptschritten (wb_Rezeptschritt).
 Jeder Rezeptschritt hat Parent und Child. Die Rezeptur beginnt am Knoten(0) ohne Parent.
 
     Schritt 0                                            (Child = Schritt 1, Schritt 2...)
         +   Schritt 1               (Parent = Schritt 0)
         +   Schritt 2               (Parent = Schritt 0)
         +   Schritt 3               (Parent = Schritt 0) (Child = Schritt 3.1, Schritt 3.2)
                 +   Schritt 3.1     (Parent = Schritt 3)
                 +   Schritt 3.2     (Parent = Schritt 3)
         +   Schritt 4               (Parent = Schritt 0)
         + ...
         
 Die Anzeige erfolgt im VirtualTree direkt mit der Angabe des Root-Nodes
 </summary>
</member>
<member name="P:WinBack.wb_Rezept.RootRezeptSchritt">
 <summary>
 Erster (unsichtbarer) Rezept-Schritt (Root-Node)
 </summary>
 <returns>wb_RezeptSchritt - Root-Node des Rezeptes</returns>
</member>
<member name="P:WinBack.wb_Rezept.RezeptGewicht">
 <summary>
 Das Rezept-Gesamtgewicht steht als Gewichtswert im Root-Node
 Die Berechnung erfolgt über RezeptSchritt.Gewicht(Get). Wenn keine Child-Steps vorhanden sind wird der Wert auf Null gesetzt
 </summary>
 <returns>Double - Rezept-Gesamtgewicht</returns>
</member>
<member name="P:WinBack.wb_Rezept.BruttoRezeptGewicht">
 <summary>
 Das Brutto-Rezept-Gesamtgewicht steht als Gewichtswert im Root-Node
 Die Berechnung erfolgt über RezeptSchritt.BruttoGewicht(Get)
 </summary>
 <returns>Double - Rezept-Gesamtgewicht</returns>
</member>
<member name="P:WinBack.wb_Rezept.RezeptPreis">
 <summary>
 Der Rezept-Gesamtpreis steht als Preis im Root-Node
 Die Berechnung erfolgt über RezeptSchritt.Preis(Get)
 </summary>
 <returns>Double - Rezept-Gesamtpreis</returns>
</member>
<member name="P:WinBack.wb_Rezept.RezeptGesamtMehlmenge">
 <summary>
 Die Rezept-Gesamt-Mehlmenge steht als TA_Mehlmenge im Root-Node
 Die Berechnung erfolgt über Rezeptschritt.TA_Mehlmenge(Get)
 </summary>
 <returns>Double - Rezept-Gesamtmehlmenge</returns>
</member>
<member name="P:WinBack.wb_Rezept.RezeptGesamtWassermenge">
 <summary>
 Die Rezept-Gesamt-Wassermenge steht als TA_Wassermenge im Root-Node
 Die Berechnung erfolgt über Rezeptschritt.TA_Wassermenge(Get)
 </summary>
 <returns>Double - Rezept-Gesamt-Wassermenge</returns>
</member>
<member name="P:WinBack.wb_Rezept.RezeptTA">
 <summary>
 Die Rezept-TA wird berechnet aus Mehl-Gesamtmenge und Wasser-Gesamtmenge
 der Rezeptur.
                 (Wasser * 100)
     TA = 100 +  --------------
                     Mehl
 </summary>
 <returns>Double - Rezept-TA</returns>
</member>
<member name="P:WinBack.wb_Rezept.Recalculate">
 <summary>
 Neuberechnung aller Werte erzwingen. z.B. nach Rezeptänderung
 
 Die Berechnung der Rezeptur-Gesamt-Werte (Gewicht, TA, Mehlanteil...) erfolgt nur einmal, wenn der entsprechende Wert abgefragt wird.
 Um eine Berechnung zu erzwingen kann Recalculate gesetzt werden.
 </summary>
</member>
<member name="P:WinBack.wb_Rezept.KtTyp301">
 <summary>
 Nährwerte und Allergene. Die Rezeptwerte stehen als Array im Root-Node.
 Die Berechnung erfolgt über den Rezeptschritt.ktTyp301(Get)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezept.LinienGruppe">
 <summary>
 Gibt die Liniengruppe der Rezeptur zurück. 
 Wenn die Rezeptvariante gleich 0 ist (Sauerteig) , wird als Liniengruppe 999 zurückgegeben
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept.#ctor(System.Int32,System.Object,System.Int32@,System.String,System.String,System.Boolean)">
 <summary>
 Erzeugt ein neues Rezeptur-Objekt.
 Nach dem Einlesen der Rezeptschritte aus der Datenbank wird das Rezept-Gesamtgewicht berechnet.
 (Anzeige der Rezeptbestandteile bezogen auf die Rezept-Gesamtmenge.
 
 Optional können noch Rohstoff-Nummer und Rohstoff-Bezeichnung übergeben werden, diese werden bei
 Fehlermeldungen (Rekursiver Aufruf von Rezept-im-Rezept) zur Information mit als Fehlermeldung
 ausgegeben.
 </summary>
</member>
<member name="M:WinBack.wb_Rezept.#ctor(System.Int32,System.Object,System.Int32,System.Int32)">
 <summary>
 Einlesen Rezeptkopf und Rezeptur aus der Historie
 </summary>
 <param name="RzNr"></param>
 <param name="RzVariante"></param>
 <param name="RzAendIndex"></param>
</member>
<member name="M:WinBack.wb_Rezept.ArtikelVerwendung">
 <summary>
 Gibt eine Liste von Artikelnummern zurück, die mit dieser Rezeptur verknüpft sind
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept.MySQLdbNew(System.Int32)">
 <summary>
 Rezeptkopf-Datensatz neu anlegen
 Es wird nur die Rezept-Nummer (intern) angelegt.
 Die Komponenten-Bezeichnung ist "Neu angelegt " mit Datum/Uhrzeit
 
 Alle weiteren Rezept-Daten werden mit MySQLdbUpdate eingetragen.
 </summary>
 <returns>Integer - neu anglegte (interne) Rezept-Nummer</returns>
</member>
<member name="M:WinBack.wb_Rezept.MySQLdbSelect_RzKopf(System.Int32,System.Int32@,System.Int32)">
 <summary>
 Liest die Rezeptkopfdaten der RezeptNummer/Rezeptvariante aus der winback.Rezepte-Tabelle. Wenn die vorgegebene Rezeptvariante nicht
 existiert, wird die Variante 1 gelesen (Standard-Variante). Wenn Variante 1 nicht exisitiert (Sauerteig-Rezept) wird Variante 0
 gelesen. Die entsprechende Variante wird (byRef) korrigiert.
 Wenn kein Rezeptkopf existiert, wird False zurückgegeben
 </summary>
 <param name="RezeptNummer"></param>
 <param name="Variante"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept.MySQLdbSelect_RzSchritt(System.Int32,System.Int32,System.Int32)">
 <summary>
 Liest alle Datenfelder zu der angegebenen Rezept-Nummer aus der WinBack-Datenbank. 
 
 Gibt True zurück, wenn der Datensatz gefunden wurde.
 </summary>
</member>
<member name="M:WinBack.wb_Rezept.MySQLdbRead_RzSchritt(MySql.Data.MySqlClient.MySqlDataReader@)">
 <summary>
 Einlesen aller Datenfelder aus der Datenbank in den Rezeptschritt (SQLRezeptschritt)
 Nach dem Einlesen wird das komplette Objekt SQLRezeptschritt in die iListe(Rezeptschritt kopiert)
 Über GetParentNode wird, abhängig von aktuellen und von vorhergehenden Rezeptschritt festgelegt,
 wie der nächste Schritt in die Kette eingehängt wird (Child/Parent-Node)
 </summary>
 <param name="sqlReader"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept.GetParentNode(WinBack.wb_Rezeptschritt,WinBack.wb_Global.KomponTypen,System.Int32,WinBack.wb_Global.KomponTypen,System.Int32)">
 <summary>
 Gibt den Parent-Node für einen neuen Rezeptschritt abhängig vom Komponenten.Typ zurück. In einem flachen Rezept ist der Parent-Node
 immer der RootRezeptSchritt.
 
 Eine Produktions-Stufe hat als Parent-Node immer den RootRezeptschritt
 Eine Kessel-Stufe hat als Parent-Node immer die Produktions-Stufe
 Kneter-Komponenten haben immer einen Parent-Node Kneter-Kopfzeile
 Wasser-Komponenten haben als Parent-Node immer die Wasser-Komponente mit Parameter-Nummer Eins
 
 </summary>
 <param name="TypeNow">Kompoenten-Type des aktuellen Rezeptschrittes</param>
 <param name="TypeLast">Komponenten-Type des letzten Rezeptscchrittes</param>
 <returns>wb_Rezeptschritt Parent-Node(Rezeptschritt) des aktuellen Rezeptschrittes</returns>
</member>
<member name="M:WinBack.wb_Rezept.MySQLdbRead_Fields(System.String,System.Object)">
 <summary>
 Aufteilen des SQL-Resultset nach Spalten-Namen auf die Obejkt-Eigenschaften
 </summary>
 <param name="Name">String - Spalten-Name aus Datenbank</param>
 <param name="Value">Object - Wert aus Datenbank</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezeptschritt.CopyFrom(WinBack.wb_Rezeptschritt)">
 <summary>
 Kopiert alle Properties dieser Klasse auf die Properties der übergebenen Klasse.
 Geschrieben werden nur die Properties, die nicht als ReadOnly deklariert sind.
 
 aus: https://stackoverflow.com/questions/531384/how-to-loop-through-all-the-properties-of-a-class

 Dient dazu, die Inhalte eines Rezeptschrittes auf einen anderen zu kopieren.
 Durch die Schleife über alle Properties ist die Funktion unabhängig von eventuellen Erweiterungen.
 </summary>
 <param name="rs">wb_Rezeptschritt nimmt die Werte der Properties der Klasse auf</param>
</member>
<member name="M:WinBack.wb_Rezeptschritt.#ctor(WinBack.wb_Rezeptschritt,WinBack.wb_Global.KomponTypen)">
 <summary>
 Einen neuen Rezeptschritt mit der angegebenen Komponenten-Type anhängen.
 Die Komponenten-Daten werden in wb_Komponenten statisch aus dem ersten Datensatz einer Komponente
 mit dem passenden Kompoententyp erzeugt.
 </summary>
 <param name="Parent"></param>
 <param name="KomponType"></param>
</member>
<member name="M:WinBack.wb_Rezeptschritt.Insert(WinBack.wb_Rezeptschritt,System.Boolean)">
 <summary>
 Fügt einen Rezeptschritt VOR oder NACH dem aktuellen Schritt ein
 </summary>
 <param name="rs"></param>
</member>
<member name="M:WinBack.wb_Rezeptschritt.InsertChild(WinBack.wb_Rezeptschritt)">
 <summary>
 Fügt einen Child-Rezeptschritt NACH dem aktuellen Schritt ein.
 Der aktuelle Schritt wird dabei zum Parent
 </summary>
 <param name="rs"></param>
</member>
<member name="M:WinBack.wb_Rezeptschritt.Delete">
 <summary>
 Löscht den aktuellen Rezeptschritt (Me)
 </summary>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Steps">
 <summary>
 Liste aller Rezeptschritte. Es werden alle Child-Rezeptschritte durchlaufen und als flache Liste nach oben
 weiter propagiert.
 Der Root-Rezeptschritt enthält eine Liste aller Rezeptschritte (Rezeptur)
 Wird zum Drucken und Speichern der Rezeptur verwendet
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezeptschritt.ReCalcRzSteps(System.Int32)">
 <summary>
 Berechnet die Schritt-Nummer aller Child-Steps neu
 Nach Insert/Delete
 </summary>
 <param name="RsStep">Start-Index</param>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.RohNr">
 <summary>
 (Interne) Komponenten-Nummer
 </summary>
</member>
<member name="P:WinBack.wb_Rezeptschritt.SchrittNr">
 <summary>
 Schritt-Nummer im Rezeptablauf
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.ParamNr">
 <summary>
 Parameter-Nummer
 Wird verwendet für mehrzeilige Komponenten (Wasser, Eis...)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Nummer">
 <summary>
 Komponenten-Nummer (alpha-numerisch)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Kommentar">
 <summary>
 Komponenten-Kommentar (bei Sprachumschaltung die deutsche Bezeichnung)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Sollwert">
 <summary>
 Sollwert
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.VirtTreeBezeichnung">
 <summary>
 Bezeichnung. Anzeige im VirtualTree (Rezeptur)
 Bei Produktions-Stufen, Kessel und Text-Komponenten wird der Sollwert als Text angezeigt
 bei allen anderen Komponenten-Typen die Komponenten-Bezeichnung.
 </summary>
 <returns>String - Bezeichnung</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.VirtTreeSollwert">
 <summary>
 Sollwert. Anzeige im VitualTree (Rezeptur)
 Bei Produktions-Stufen, Kessel und Text-Komponenten wird ein leeres Feld angezeigt,
 bei Automatik, Hand, Eis, Wasser oder Verpackung/Stk wird der Sollwert formatiert mit 3 Nachkomma-Stellen angezeigt.
 </summary>
 <returns>String - Sollwert</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.VirtTreePreis">
 <summary>
 Preis. Anzeige im Virtual-Tree (Rezeptur)
 Wenn ein Preis eingetragen ist, wird der Wert formatiert auf 2 Stellen ausgegeben
 </summary>
 <returns>String- Preis</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.VirtTreeEinheit">
 <summary>
 Einheit. Anzeige im Virtual-Tree (Rezeptur)
 Gibt für Automatik, Hand, Eis, Wasser, Kneter und Temperatur-Erfassungs-Komponenten die entsprechende Einheit aus der Datenbank zurück
 </summary>
 <returns>String- Einheit</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.VirtTreeProzent">
 <summary>
 Prozent-Spalte. Anzeige der Anteile im Virtual-Tree(Rezeptur)
 Gibt wahlweise den prozentualen Anteil an der Gesamt-Teigmenge, den Anteil bezogen auf die Mehlmenge oder die TA zurück.
 </summary>
 <returns>String - Anteil in Prozent/TA</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Einheit">
 <summary>
 Einheit
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Type">
 <summary>
 Komponenten-Type der Komponente in der Rezept-Zeile
 </summary>
 <returns>KompontTypen - KomponentenType</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.RezeptNr">
 <summary>
 Rezept-Nummer aus Komponente in der Rezept-Zeile. Wenn die Rezeptnummer größer als Null ist, beeinhaltet die
 Komponente eine unterlagerte Rezeptur.
 </summary>
 <returns>Integer - Rezeptnummer</returns>
</member>
<member name="M:WinBack.wb_Rezeptschritt.SetType118">
 <summary>
 Setzt die Werte für Einheit, Format und Sollwert bei Kneter-Komponenten.
 Erzeugen von Kneter-Rezepten aus Komponenten(128)
 </summary>
</member>
<member name="P:WinBack.wb_Rezeptschritt.TA">
 <summary>
 TA der Rezeptzeile aus KomponentenParametern lesen. Wenn die Komponente auf ein Rezept zeigt (RezeptNr größer Null)
 dann wird die TA aus dem Unter-Rezept berechnet. (Rekursive Funktion)
 </summary>
 <returns>Integer - TA</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt._Gewicht">
 <summary>
 Gewichtswert des Rezeptschrittes. Gibt den Sollwert der Rezept-Zeile zurück, wenn diese eine Komponente enthält, die 
 zum Rezeptgewicht zählt und das Flag 'zählt zum Rezeptgewicht' gesetzt ist.
 </summary>
 <returns>Double - Sollwert</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt._BruttoGewicht">
 <summary>
 Brutto-Gewichtswert des Rezeptschrittes. Gibt den Sollwert der Rezept-Zeile zurück, unabhängig vom Flag
 'zählt zum Rezeptgewicht'
 </summary>
 <returns>Double - Sollwert</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Gewicht">
 <summary>
 Gibt das Gewicht der Rezeptzeile zurück. Wenn diese Zeile weitere (Child)Rezeptzeile enthält wird zuerst das Gewicht der 
 unterlagerten Zeilen berechnet und dann die Summe zurückgegeben.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.BruttoGewicht">
 <summary>
 Gibt das Brutto-Gewicht der Rezeptzeile zurück. Wenn diese Zeile weitere (Child)Rezeptzeile enthält wird zuerst das Gewicht der 
 unterlagerten Zeilen berechnet und dann die Summe zurückgegeben.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.RezGewicht">
 <summary>
 Rezept-Gesamtgewicht an alle Rezeptschritte weiterpropagieren. Wird benötigt zur Berechnung/Anzeige des Anteils der Komponente am 
 Rezeptgesamtgewicht auf der Rezeptzeile.
 </summary>
</member>
<member name="P:WinBack.wb_Rezeptschritt.BruttoRezGewicht">
 <summary>
 Brutto-Rezept-Gesamtgewicht an alle Rezeptschritte weiterpropagieren. Wird benötigt zur Berechnung der Nährwerte
 </summary>
</member>
<member name="P:WinBack.wb_Rezeptschritt._TA_Mehlmenge">
 <summary>
 Gibt die Mehlmenge der Komponente dieser Rezeptzeile zurück. 
     bei Mehl-Komponenten (TA = 100) wird die Sollmenge zurückgegeben.
     bei Sauerteig (TA > 100) wird der Mehlanteil berechnet.
 Wenn die Komponente auf ein Rezept zeigt, wird der Mehlanteil dieses Rezeptes berechnet und mit der Sollmenge verrechnet.
 </summary>
 <returns>Double - Mehlmenge</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.TA_Mehlmenge">
 <summary>
 Addiert die Mehlmenge des aktuellen Rezeptschrittes und die Mehlmengen der untergeordneten Rezeptschritte im Baum (Child-Steps).
 </summary>
 <returns>Double - Mehlmenge</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt._TA_Wassermenge">
 <summary>
 Gibt die Wassermenge der Komponente dieser Rezeptzeile zurück. 
     bei Wasser-Komponenten (TA = -1) wird die Sollmenge zurückgegeben.
     bei Sauerteig (TA > 100) wird der Wasseranteil berechnet.
 Wenn die Komponente auf ein Rezept zeigt, wird der Wasseranteil dieses Rezeptes berechnet und mit der Sollmenge verrechnet.
 </summary>
 <returns>Double - Wassermenge</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.TA_Wassermenge">
 <summary>
 Addiert die Wassermenge des aktuellen Rezeptschrittes und die Wassermengen der untergeordneten Rezeptschritte im Baum (Child-Steps).
 </summary>
 <returns>Double - Wassermenge</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt._Preis">
 <summary>
 Gibt den EK-Preis der Komponente dieser Rezeptzeile zurück. 
 Wenn die Komponente auf ein Rezept zeigt, wird der Preis dieses Rezeptes berechnet und mit der Sollmenge verrechnet.
 </summary>
 <returns>Double - Preis</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.Preis">
 <summary>
 Addiert den Preis der Komponente der aktuellen Rezeptzeile mit den Preisen der untergeordneten Zeilen (Child-Steps)
 </summary>
 <returns>Double - Preis</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.PreisProKg">
 <summary>
 Preis pro kg eines Rohstoffes aus der Datenbank
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.ZaehltNichtZumRezeptGewicht">
 <summary>
 Rezeptzeile zählt nicht zum Rezeptgesamtgewicht
 </summary>
 <returns>Boolean - Zählt nicht zum Rezeptgewicht</returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.ktTyp301">
 <summary>
 Gibt die Komponentendaten(Nährwerte) des aktuellen Rezeptschrittes zurück. Wenn die Komponenten-Parameter noch nicht vorhanden sind,
 werden zuerst alle Daten zum Rezeptschritt anhand der Komponenten-Nummer aus der Datenbank gelesen.
 
 Wenn die Komponente auf ein Rezept zeigt (Rezept-im_Rezept), wird zunächst das Unter-Rezept berechnet und dann alle Werte addiert.
 Alle untergeordneten Rezeptschritte im Baum werden berechnet und mit der aktuellen Zeile addiert.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezeptschritt.ZutatenListe(System.Double)">
 <summary>
 Gibt die Zutatenliste mit Bezeichnung und Mengen-Angabe aller unterlagerten Rezeptschritte zurück
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_DockBarPanelMain">
 <summary>
 Klasse (must Inherit) beeinhaltet alle notwendigen Routinen für die Anzeige der Unterfenster in
 OrgaBack als Docking-Window. Status-Bar mit Schaltflächen für das Layout-Management.
 
 Die einzelnen Layouts werden entsprechen der OrgaBack-Installation im ..\Temp\-Verzeichnis gespeichert.
 Abgeleitete Klassen müssen folgende Prozeduren und Properties überschreiben
 
     -   FormText    (eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn)
     -   FormName    (eindeutiger Name für das Fenster, dient zum Speichern der Einstellungen)
     
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.wbBuildDocContent(System.String)">
 <summary>
 Stellt die Dock-Panel-Fensterkonfiguration wieder her. Wird von LoadDockBarConfig aufgerufen.
 
 </summary>
 <param name="persistString"> String - Name Fenster-Objekt</param>
 <returns>Form - Fenster-Form-Objekt</returns>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.SetDefaultLayout">
 <summary>
 Default Layout-Konfiguration (wenn alles schief geht). Wird von LoadDockBarConfig() aufgerufen
 wenn kein gültiges Layout gefunden wurde
 </summary>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.#ctor(Signum.OrgaSoft.Common.IOrgasoftServiceProvider)">
 <summary>
 Konstruktor
 </summary>
 <param name="ServiceProvider">ServiceProvider von OrgaSoft.NET</param>
 <remarks></remarks>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.Init">
 <summary>
 Routine wird aufgerufen, wenn das Fenster geladen wurde und angezeigt werden soll
 </summary>
 <returns></returns>
 <remarks>Die Caption des Fensters muss mit MyBase.Text gesetzt werde</remarks>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.FormClosing(System.Int16)">
 <summary>
 Diese Function wird aufgerufen, wenn das Fenster geschlossen werden soll.
 </summary>
 <param name="Reason"></param>
 <returns>
 False, wenn das Fenster geschlossen werden darf
 True, wenn das Fenster geöffnet bleiben muss
 </returns>
 <remarks></remarks>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.FormKey">
 <summary>
 Eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn
 z.B. Return "@WinBack DockPanelMain"
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.MinHeight">
 <summary>
 Minimale Höhe des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.MinWidth">
 <summary>
 Minimale Breite des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.Sizable">
 <summary>
 Gibt an, ob man die Größe dieses UserControls ändern darf
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.Text">
 <summary>
 Bezeichnung und Caption des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.LayoutFilename">
 <summary>
 Die Information kommt aus der winback.ini und wird in der Routine wb_DockBarPanelShared.SetFormBoundaries ausgelesen (in wb_Main_Menu)
 </summary>
 <returns>String - Layout-Filename</returns>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.SaveDockBarConfig(WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 DockBar-Konfiguration sichern
     Diese Einstellungen werden in wb_Main_Menu gelesen und verarbeitet
 </summary>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.LoadDockBarConfig">
 <summary>
 Läd die Dock-Panel-Konfiguration aus der Konfiguration-Datei (*.xml). Die Konfiguration wird 
 über SaveToXml gesichert.
 </summary>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.GetLayoutFileNames">
 <summary>
 Füllt die ListBox cbLayouts mit den Layout-Bezeichnungen. Die Bezeichnungen werden aus den FormNamen
 gebildet.
 </summary>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.cbLayouts_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 Die Auswahl in der Drop-Down-Liste hat sich geändert. Neues Layout laden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.BtnReload_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Reload". Layout neu aus Datei laden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.BtnSave_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Save". Das Layout wird unter dem aktuellen Namen lokal gespeichert.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.BtnSaveAs_Click(System.Object,System.EventArgs)">
 <summary>
 Button "Save As". Öffnet das Fenster DockPanelConfigSaveAs. Auswahl des Layout-Namens
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.ESaveAs_Click(System.Object,System.String,WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 Speichert das Layout unter dem angegebene  Namen.
 </summary>
 <param name="sender"></param>
 <param name="FileName"></param>
 <param name="DefaultPath"></param>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.BtnDelete_Click(System.Object,System.EventArgs)">
 <summary>
  Button "Delete". Löscht das ausgewählte Layout Lokal und Global.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:WinBack.wb_DockBarPanelMain.DkPnlConfigFileName(WinBack.wb_Global.OrgaBackDockPanelLayoutPath)">
 <summary>
 Erzeugt den File-Namen für die Konfig-Datei aus Layout-File-Name und Fom-Name.
 Ohne Angaben wird der lokale Pfad zurückgegeben (..\Temp\xx, wobei xx die Arbeitsplatz-Nummer ist).
 Optional der Globale-Pfad (..\Temp\00)
 </summary>
 <param name="DefaultPath"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.DkPnlConfigName(System.String,System.String)">
 <summary>
 Extrahiert den Layout-Namen aus dem File-Namen der Config-Datei.
 Wenn der Layout-Name nicht zum Form-Namen passt, wird ein Leerstring zurückgegeben.
 </summary>
 <param name="FileName"></param>
 <param name="FormName"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_DockBarPanelMain.GetDkPnlConfigNameList(System.String,System.String)">
 <summary>
 Erzeugt eine Liste aller zum Form-Namen passenden Konfigurations-Namen
 </summary>
 <param name="DirName"></param>
 <param name="FormName"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_sql_BackupRestore.PrepareSQLFile(System.String,System.String)">
 <summary>
 Datensicherung xxx.sql für mySQL-Import vorbereiten. 
 Fügt 3 Zeilen am Anfang der Datei ein:
 - DROP DATABASE winback;
 - CREATE DATABASE winback;
 - USE winback;
 
 Löscht alle SQL-Kommentare in der Import-Datei
 </summary>
 <remarks>
 Damit der Import in die mysql-Datenbank (V5.xxx) funktioniert muss in der my.ini
 der SQL-Mode STRICT abgeschaltet werden: (C:\Program Files\MySQL\MySQL Server 5.0)
 
 # Set the SQL mode to NO strict (14.11.2016/JW)
 sql-mode="NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
 </remarks>
 <param name="FileName"> String Dateiname und Pfad inlusive Extension</param>
 <param name="DataBase"> String Datenbank (winback/wbdaten)</param>
</member>
<member name="T:WinBack.wb_Hinweise">
 <summary>
 Eigene Klasse für winback.Hinweise2.
 Aus wb_sql_Function herausfaktorieren!
 </summary>
</member>
<member name="M:WinBack.wb_Hinweise.#ctor(WinBack.wb_Global.Hinweise)">
 <summary>
 Objekt initialisieren. Die Daten werden nicht gelesen.
 </summary>
 <param name="DataTyp"></param>
</member>
<member name="M:WinBack.wb_Hinweise.#ctor(WinBack.wb_Global.Hinweise,System.Int32)">
 <summary>
 Objekt initialiseren. Die entsprechenden Daten werden gelesen
 </summary>
 <param name="DataTyp">Datentyp</param>
 <param name="idx">Rohstoff/Artikel/Rezeptnummer</param>
</member>
<member name="M:WinBack.wb_Hinweise.Read(System.Int32)">
 <summary>
 Daten aus Datenbank winback.Hinweise2 einlesen.
 </summary>
 <param name="idx">Integer - Komponenten/Artikelnummer</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Hinweise.Write">
 <summary>
 Daten in Datenbank winback.Hinweise2 schreiben
 Die Änderungs-Nummer wird automatisch hochgezählt.
 Änderungsdatum ist das aktuelle Datum.
 </summary>
 <returns>True - Wenn erfolgreich
 False - bei Fehler</returns>
</member>
<member name="M:WinBack.wb_Hinweise.Delete">
 <summary>
 Löscht den entsprechenden Eintrag in der Datenbank
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Hinweise.GetTyp(WinBack.wb_Global.Hinweise,System.Int32@,System.Int32@)">
 <summary>
 Zuordnung von Hinweis.Datentyp zu H2_Typ,H2_Typ2 in der Datenbank winback.Hinweise2
 
         Datentyp              H2_Typ  H2_Typ2   H2_Id2
         ===================================================
         RezeptHinweise          2       0       RezepNr
         ArtikelHinweise         3       0       ArtikelNr
         UserInfo                4       0       UserNr
         ZutatenListe            9       1       ArtikelNr
         MehlZusammensetzung     9       2       ArtikelNr
         GebCharakteristik      10       1       ArtikelNr
         Verzehrtipps           10       2       ArtikelNr
         Wissenswertes          10       3       ArtikelNr
         DeklBezRohstoff        11       0       RohstoffNr  
         DeklBezRohstoffIntern  11       1       RohstoffNr  
         MessageTextLinie       20       0       LinienNr
         MessageTextUser        20       1       UserNr
         NaehrwertUpdate        21       0       RohstoffNr
         
 </summary>
 <param name="DataTyp"></param>
 <param name="Typ1"></param>
 <param name="Typ2"></param>
 <returns></returns>
</member>
<member name="T:WinBack.wb_ComboBox">
 <summary>
 Ableitung der Klasse Windows.Forms.ComboBox

 wbComboBox.Fill füllt die ComboBox mit Texten
 aus einer Hash-Table. Der entsprechende Keys
 der HashTable setzt/liest den Selectierten Text.

 </summary>
</member>
<member name="M:WinBack.wb_ComboBox.GetKeyFromSelection">
 <summary>
´Gibt den Key aus HashTable zurück, der dem selektierten Text entspricht
 </summary>
 <returns>Integer Key</returns>
</member>
<member name="M:WinBack.wb_ComboBox.SetTextFromKey(System.Int32)">
 <summary>
 Setzt den selektierten Text entsprechend dem Key aus HashTable
 </summary>
 <param name="Key">Schlüssel</param>
</member>
<member name="M:WinBack.wb_ComboBox.Fill(System.Collections.SortedList)">
 <summary>
 ComboBox mit Texten aus HashTable füllen.
 </summary>
 <param name="HashTable"></param>
</member>
<member name="T:WinBack.wb_CreateSQLTables">
 <summary>
 Routinen zum Erzeugen der WinBack-Tabellen in der
 MSSQL-Datenbank
 </summary>
</member>
<member name="T:WinBack.wb_Filiale">
 <summary>
 Liest aus der Tabelle dbo.Filialen alle Einträge aus. Im Feld dbo.Filiale.Typ wird festgelegt welcher Filial-Typ
 dieser Filiale zugeordnet ist. Ist diese Filiale eine Produktions-Filiale wird Typ=4 (wb_Konfig.ProduktionsFiliale) eigetragen.
 Erzeugt ArrayList pFiliale

 Liest aus der Tabelle dbo.FilialeHatSortiment die Sortiments-Kürzel, die mit einer Filiale vom Typ "Produktion" verknüpft sind.
 Erzeugt ArrayList pSortiment
 </summary>
</member>
<member name="M:WinBack.wb_Filiale.#cctor">
 <summary>
 Wird automatisch beim Aufruf einer der shared Functions aufgerufen (Shared Object)
 Initialisiert die Felder pFiliale und pSortiment
 </summary>
</member>
<member name="M:WinBack.wb_Filiale.AddFiliale(System.String)">
 <summary>
 FÜr Unit-Test. ArrayList mit Filial-Nummern füllen
 </summary>
</member>
<member name="P:WinBack.wb_Filiale.FilialeIstProduktion(System.String)">
 <summary>
 Gibt True zurück, wenn eine der Filialen den Typ Produktion hat.
 </summary>
 <param name="FilialNr">Komma-separierter String enthält eine Filiale, die der Produktion zugeordnet ist</param>
 <returns>True wenn eine der Filialen der Produktion zugeordnet</returns>
</member>
<member name="P:WinBack.wb_Filiale.SortimentIstProduktion(System.String)">
 <summary>
 Liefert True zurück, wenn die übergebene Sortiment-Nummer (Kürzel) einer Filiale zugeordnet ist, die den Typ Produktion hat.
 Der entsprechende Artikel wird in WinBack gelistet.
 </summary>
 <param name="SortimentNr"></param>
 <returns>True wenn die Sortiment-Nummer einer Produktions-Filiale zuegordnet ist.</returns>
</member>
<member name="M:WinBack.wb_Language.GetLanguageNr">
 <summary>
 Zuordnung ISO-Sprache zu WinBack-Sprache-Nr
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Language.LoadTexteTabelle(System.String)">
 <summary>
 Hash-Table mit den Übersetzungen für die jeweilige Sprache vorladen. Die HashTable übersetzt
 die Texte aus der WinBack-Datenbank die mit @[x,y] gekennzeichnet sind in die jeweilige Landes-Sprache
 </summary>
 <param name="Sprache"></param>
</member>
<member name="M:WinBack.wb_Language.TextFilter(System.String)">
 <summary>
Text aus Datenbank lesen - Übersetzung
 von Herbert Bsteh aus winback (Kylix)
 Erste Zahl (Texttyp), zweite Zahl (Textindex)

 Gibt den Text ohne Klammer zurück wenn
 kein Text in der Datenbank gefunden wurde
 </summary>
 <param name="Text">String im Format @[Typ,Index]</param>
 <returns>String - Übersetzung aus winback.Texte</returns>
</member>
<member name="E:WinBack.wb_TraceListener.WriteText">
 <param name="Txt"> String Debug/Trace-Text</param>
</member>
<member name="M:WinBack.wb_TraceListener.Write(System.String)">
 <summary>
 Sub Write (overrides)
 Verschickt den Debug/Trace-Text an alle angemeldeten Listener
 </summary>
 <param name="message"> String Debug/Trace-Text</param>
</member>
<member name="M:WinBack.wb_TraceListener.WriteLine(System.String)">
 <summary>
 Sub Write (overrides)
 Verschickt den Debug/Trace-Text mit Datum/Uhrzeit und Zeilen-Vorschub als Event an alle angemeldeten Listener
 </summary>
 <param name="message"> String Debug/Trace-Text</param>
</member>
<member name="M:WinBack.wb_TraceListener.GetLocalStackTrace(System.String)">
 <summary>
 Extrahiert aus Environment.StackTrace die Programm-Zeile der aufrufenden Routine:
 (Beispiel)
 
     bei System.Environment.GetStackTrace(Exception e, Boolean needFileInfo)
     bei System.Environment.get_StackTrace()
     bei WinBack.wb_TraceListener.WriteLine(String message) In C:\Users\will.WINBACK\Source\Repos\Signum_WinBack\wb_00_Klassen\wb_TraceListener.vb:Zeile 36.
     bei System.Diagnostics.TraceInternal.WriteLine(String message)
     bei System.Diagnostics.Trace.WriteLine(String message)
     bei WinBackUnitTest.UnitTest_wb_TraceLogger.TestTraceWriteLn() In C:\Users\will.WINBACK\Source\Repos\Signum_WinBack\WinBackUnitTest\UnitTest_wb_TraceLogger.vb:Zeile 39.
         =======
     bei System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
     bei System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
     bei System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner.DefaultTestMethodInvoke(Object[] args)
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner.RunTestMethod()
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner.ExecuteTest()
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner.ExecuteInternal()
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner.Execute()
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestRunner.RunInternal(TestMethod testMethod, Boolean isDataDriven, Dictionary`2 runParameters)
     bei Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestRunner.RunSingleTest(String name, String fullClassName, Boolean isAsync, Dictionary`2 runParameters)
 </summary>
 <param name="Stack"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_ZutatenListe_Global.#cctor">
 <summary>
 Vor dem ersten Aufruf der Funktionen in dieser Klasse wird der shared-Konstruktor aufgerufen
 Initialisierung und Aufbau der Hash-Table aus der Datenbank (Tabelle ENummern)
 </summary>
</member>
<member name="T:WinBack.wb_GlobalOrgaBack">
 <summary>
 Liest die Einstellungen aus der Tabelle (Admin)dbo.Settings. Die Aufschlüsselung der Index-Nummern steht in der
 Tabelle (Admin)dbo.Configuration.
 
 Die Verbindung zur Admin-Datenbank wird über den Admin-Connection-String hergestellt.
 </summary>
</member>
<member name="P:WinBack.wb_GlobalOrgaBack.Theme">
 <summary>
 Farbschema für Fenster-Docking. In der Programm-Variante OrgaBack wird immer VS2015BlueTheme zurückgegeben
 </summary>
 <returns>Theme - ThemeBase</returns>
</member>
<member name="P:WinBack.wb_GlobalOrgaBack.OrgaBackDockPanelPath">
 <summary>
 Gibt den Speicherort der Fenster-Definitionen zurück. Die Daten werden aus der OrgaBack-DB
 gelesen. (OrgaBack.Admin.dbo.Settings)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_GlobalOrgaBack.OrgaBackWorkStationNumber">
 <summary>
 Ermittelt die (OrgaBack)Arbeitsplatz-Nummer aus dem MicroSoft Workstation-Namen.
 Die Nummer wird aus der Tabelle dbo.Workstations gelesen. 
 Wenn die Arbeitsplatz-Nummer nicht gefunden wird, wird "00" zurückgegeben.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_GlobalOrgaBack.DbReadSetting(System.String)">
 <summary>
 Liest alle benötigten Einträge aus der OrgaBack.Admin-Tabelle dbo.Settings
 </summary>
</member>
<member name="P:WinBack.wb_GlobalOrgaBack.WorkStationName">
 <summary>
 Gibt der MicroSoft Workstation-Namen zurück. Bei Zugriffen über Remote-Desktop wird
 der Workstation-Name des Desktop-Client zurückgegeben.
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_GlobalSettings">
 <summary>
 Shared Objekt. Hält alle globalen Programm-Einstellungen zentral in einem Objekt.
 Ersetzt die projektabhängigen Settings.
 
 Wenn eine Einstellung angefordert wird (Get) kann diese aus 
     - winback.ini zentral bzw. lokal gelesen werden
     - der WinBack-Datenbank direkt aus winback.Konfiguration
     - der OrgaBack-Datenbank aus ADMIN.dbo.Settings (über wb_GlobalOrgaBack)
     
 Sind die Einstellungswerte schon gelesen worden, wird der Wert direkt zurückgegeben, ansonsten aus der Quelle gelesen (1x)
 
 Die Datei winback.ini liegt im Programm-Wurzel-Verzeichnis von OrgaSoft(C:\Program Files (x86)\Signum\OrgaSoft)
 nicht im AddIn-Verzeichnis. Der Pfad des AddIn-Verzeichisses kann erst nach Initialisierung der Datenbank ausgelesen werden.
 
 </summary>
</member>
<member name="P:WinBack.wb_GlobalSettings.SqlConWinBack">
 <summary>
 Liefert den Connection-String für die WinBack-Datenbank zurück.
     Für mysql wird mit "ConvertZeroDateTime=True" der Konvertierungs-Fehler bei der Umwandlung der TimeStamp-Daten unterdrückt
     (siehe https://www.connectionstrings.com/mysql/)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_GlobalSettings.pListenPath">
 <summary>
 Pfad für die ListUndLabel-Listen-Files
 Im Debug-Modus wird als Verzeichnis direkt das Repository zurückgegeben, damit werden alle Änderungen automatisch synchronisiert.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_GlobalSettings.pWinBackIniPath">
 <summary>
 Setzt/gibt den Pfad zur winback.ini zurück.
 
 Läuft das Programm als OrgaBack-AddIn ist der Pfad für die winback.ini im Verzeichnis OrgaSoft
 Das Addin läuft in OrgaSoft/Addin
 
 Das Hintergrund-Programm WinBack-Server-Task startet im Verzeichnis OrgaSoft/AddIn, der Verweis
 auf die winback.ini liegt damit eine Ebene tiefer.
 Für den Debugger wird der Pfad zur winback.ini als Parameter übergeben, da sonst der Programm-Pfad
 verwendet werden muss.

 als winback.exe im Standalone-Betrieb liegt die winback.ini im Programm-Verzeichnis
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_GlobalSettings.KommentarStattBezeichnung">
 <summary>
 Anzeige des Kommentarfeldes anstelle der Bezeichnung für Installationen im Ausland.
 Wenn die WinBack.Konfiguration.SprachenVariante eingeschaltet ist (1) wird anstelle der Komponenten/Artikel/Rezeptbezeichnung das
 entsprechende Kommentarfeld eingeblendet. Dies passiert nur, wenn die eingestellte Sprache in WinBack-Office gleiche der Sprache2
 in der WinBack Konfiguration ist.
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_PrinterDialog">
 <summary>
 KLasse zum Drucken von Reports über ListUndLabel
 Erzeugt zusätzliche Variablen in LL
     Kopfzeile_1
     Kopfzeile_2
 </summary>
</member>
<member name="P:WinBack.wb_PrinterDialog.ListSubDirectory">
 <summary>
 Name des Unter-Verzeichnis für die ListUndLabel-Report-Files
 Das Stammverzeichnis wird in wb_globalSettings festgelegt
     Programm-Verzeichnis/Listen
 </summary>
</member>
<member name="P:WinBack.wb_PrinterDialog.ListFileName">
 <summary>
 Datei-Name des ListUndLabel-Report-Files
 </summary>
</member>
<member name="P:WinBack.wb_PrinterDialog.LL_KopfZeile_1">
 <summary>
 Kopfzeile 1 ListUndLabel
 </summary>
</member>
<member name="P:WinBack.wb_PrinterDialog.LL_KopfZeile_2">
 <summary>
 Kopfzeile 2 ListUndLabel
 </summary>
</member>
<member name="M:WinBack.wb_PrinterDialog.OK_Button_Click(System.Object,System.EventArgs)">
 <summary>
 Start Druck
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.Cancel_Button_Click(System.Object,System.EventArgs)">
 <summary>
 Abbruch Drucken
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.btnEditVorlage_Click(System.Object,System.EventArgs)">
 <summary>
 Edit ListUndLabel-Vorlage-Datei
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.btnExportExcel_Click(System.Object,System.EventArgs)">
 <summary>
 Export nach Excel über ListUndLabel
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.wb_PrinterDialog_Load(System.Object,System.EventArgs)">
 <summary>
 Initialisierung.
 Laden aller Windows-Drucker. Ermittlung Windows-Standard-Drucker
 Laden des letzten verwendeten Druckers aus dem ListundLabel-Report-File
 
 Das Drucker-Auswahl-Feld wird mit allen verfügbaren Druckern initialisiert.
 Der Default-Drucker ist entweder der Windows-Standard-Drucker oder der letzte
 verwendete Drucker aus dem LL-Report-File
 
 Anzeige der Miniatur-Vorschau
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.ShowPreview">
 <summary>
 Anzeige der Miniatur-Vorschau. Wenn keine Daten vorhanden sind, wird das Fenster 
 geschlossen und eine Fehlermeldung ausgegeben.
 </summary>
</member>
<member name="M:WinBack.wb_PrinterDialog.BtnVorschau_Click(System.Object,System.EventArgs)">
 <summary>
 Anzeige eines (großen) Vorschau-Fensters. Aus diesem Fenster kann auch gedruckt werden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.LL_AutoDefineNewLinie(System.Object,combit.ListLabel22.AutoDefineNewLineEventArgs)">
 <summary>
  Zusätzliche Felder anmelden:
  Innerhalb des "AutoDefineNewLine" Events können In der Fields-Collection mit der Methode "Add" Felder hinzugefügt werden
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_PrinterDialog.LL_AutoDefineNewPage(System.Object,combit.ListLabel22.AutoDefineNewPageEventArgs)">
 <summary>
 Zusätzliche Variablen anmelden:
 Um zusätzliche Variablen zu definieren, kann man das Event "AutoDefineNewPage" verwenden. Auch hier funktioniert die Variables-Collection.
 
 Fügt zwei zusätzliche Variablen in ListUundLabel ein:
     -Kopfzeile1
     -Kopfzeile2
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:WinBack.ob_ChargenProduziert">
 <summary>
 Rückmeldung der produzierten Chargen an OrgaBack
 Schreibt alle zum Zeitpunkt x produzierten Artikel in die Tabelle dbo.ProduzierteWare
 Alle Rohstoffe die verbraucht worden sind werden in die Tabelle dbo.ProduzierteWare mit SatzTyp=V geschrieben
 
 Nach dem Schreiben der Daten werden die Artikel und Rohstoffe in WinBack mit wbdaten.BAK_ArbRezepte.B_ARZ_Status = Exp gekennzeichnet
 </summary>
</member>
<member name="M:WinBack.ob_ChargenProduziert.#ctor">
 <summary>
 Alle Chargen vor dem Stichtag werden als ungültig deklariert und nicht an OrgaBack zurückgemeldet
 (Hauptsächlich nicht produzierte Chargen)
 </summary>
</member>
<member name="M:WinBack.ob_ChargenProduziert.ExportChargen(System.Int32)">
 <summary>
 Exportiert die einzelnen Produktions-Chargen-Daten ab der vorgegebenen 
 Tageswechselnummer in dbo.ProduzierteWare. Zurückgegeben wird 
 die letzte ausgegebene Tageswechsel-Nr.
 
 Es wird immer zuerst der Chargen-Kopf und danach die verbrauchten Rohstoffe ausgegeben
 </summary>
 <param name="TWNr"></param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_ChargenProduziert.ProduktionDatumGueltig(System.DateTime)">
 <summary>
 Prüft auf gültiges Produktions-Datum
 (Chargen wurde produziert)
 </summary>
 <param name="d"></param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_ChargenProduziert.SqlWriteProdWare(WinBack.wb_Sql,WinBack.ob_ProduzierteWare)">
 <summary>
 Schreibt einen Datensatz aus ob_ProduzierteWare in die Tabelle dbo.ProduzierteWare
 Die Datenbank-Verbindung muss geöffnet sein.
 
 INSERT INTO [dbo].[ProduzierteWare] 
     lfdNr                   Laufende Nummer (wird in der DB automatisch generiert - DB.Tabelle Update erforderlich !!)
     FilialNr                Produktions-Filiale
     ProduktionsDatum
     SatzTyp
     ArtikelNr
     Einheit
     Farbe
     Groesse
     Menge
     ChargenNr
     HaltbarkeitsDatum
 </summary>
 <param name="db"></param>
 <param name="o"></param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_ChargenProduziert.MarkChargenKopf(WinBack.wb_Sql,System.Int32,System.String)">
 <summary>
 Markiert alle exportierten Chargendaten als bearbeitet.
 In der Tabelle BAK_ArbRezepte wird das Feld B_ARZ_Status auf EXP gesetzt
 </summary>
 <param name="TWNr"></param>
 <param name="ChargenNummer"></param>
 <returns></returns>
</member>
<member name="P:WinBack.ob_ProduzierteWare.ChargenNummer">
 <summary>
 Chargen-Nummer begrenzt auf maximal 15 Zeichen
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.ob_ProduzierteWare.#ctor(System.String)">
 <summary>
 Konstruktor übergibt die Chargen-Nummer des vorhergehenden Datensatzes. Ist die Chargen-Nummer identisch, ist der 
 Satztyp 'V' also eine Rohstoff-Zeile (Verbrauchsdaten)
 Ist die Chargen-Nummer geändert, ist der Satztyp NULL (Produzierter Artikel)
 
 Die Länge wird begrenzt auf 15 Zeichen, da sonst ein Überlauf beim Insert in die Datenbank auftritt.
 </summary>
 <param name="ChargeNr"></param>
</member>
<member name="M:WinBack.ob_ProduzierteWare.MySQLdbRead_Chargen(MySql.Data.MySqlClient.MySqlDataReader@)">
 <summary>
 Einlesen aller Datenfelder aus der Datenbank wbdaten in ob_ProduzierteWare
 </summary>
 <param name="sqlReader"></param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_ProduzierteWare.MySQLdbRead_Fields(System.String,System.Object)">
 <summary>
 Aufteilen des SQL-Resultset nach Spalten-Namen auf die Objekt-Eigenschaften
 </summary>
 <param name="Name">String - Spalten-Name aus Datenbank</param>
 <param name="Value">Object - Wert aus Datenbank</param>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Artikel_VerwendungRezept.FormKey">
 <summary>
 Eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_VerwendungRezept.MinHeight">
 <summary>
 Minimale Höhe des UserControls
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_VerwendungRezept.MinWidth">
 <summary>
 Minimale Breite des UserControls
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_VerwendungRezept.Sizable">
 <summary>
 Gibt an, ob man die Größe dieses UserControls ändern darf
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_VerwendungRezept.Text">
 <summary>
 Bezeichnung und Caption des UserControls
 </summary>
</member>
<member name="M:WinBack.ob_Artikel_VerwendungRezept.FormClosing(System.Int16)">
 <summary>
 Diese Function wird aufgerufen, wenn das Fenster geschlossen werden soll.
 </summary>
 <param name="Reason"></param>
 <returns>
 False, wenn das Fenster geschlossen werden darf
 True, wenn das Fenster geöffnet bleiben muss
 </returns>
 <remarks></remarks>
</member>
<member name="P:WinBack.ob_Artikel_ZuordnungRezept.FormKey">
 <summary>
 Eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_ZuordnungRezept.MinHeight">
 <summary>
 Minimale Höhe des UserControls
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_ZuordnungRezept.MinWidth">
 <summary>
 Minimale Breite des UserControls
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_ZuordnungRezept.Sizable">
 <summary>
 Gibt an, ob man die Größe dieses UserControls ändern darf
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_ZuordnungRezept.Text">
 <summary>
 Bezeichnung und Caption des UserControls
 </summary>
</member>
<member name="M:WinBack.ob_Artikel_ZuordnungRezept.FormClosing(System.Int16)">
 <summary>
 Diese Function wird aufgerufen, wenn das Fenster geschlossen werden soll.
 </summary>
 <param name="Reason"></param>
 <returns>
 False, wenn das Fenster geschlossen werden darf
 True, wenn das Fenster geöffnet bleiben muss
 </returns>
 <remarks></remarks>
</member>
<member name="M:WinBack.ob_Artikel_ZuordnungRezept.DataIsInvalid">
 <summary>
 Die Daten im Fenster haben sich durch Benutzer-Eingabe geändert.
 Flag setzen (DataHasChanged). Über den Event DataInvalidated wird dem Haupt-Fenster mitgeteilt, dass die Daten vor dem Schliessen
 oder Löschen des Fensters gesichert werden müssen.
 
 setzt das Flag _Extendee.Changed in ob_Artikel_DockingExtension
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.ContextTabs">
 <summary>
 Falls die Extension ein eigenes Context-Ribbon zum bestehenden Ribbon hinzufügen möchte, kann sie dieses hier zurückliefern
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.ExtendedType">
 <summary>
 Klasse, deren Docking-Layout erweitert werden soll (Artikel)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.Extendee">
 <summary>
 Referenz auf die Framework-Klasse, die im Docking-Fenster derzeit angezeigt wird
 </summary>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_Invalid(System.Object,System.EventArgs)">
 <summary>
 Das Objekt hat derzeit keinen gültigen Status.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_AddNew(System.Object,System.EventArgs)">
 <summary>
 Es wird ein neues, leeres Objekt erzeugt und angezeigt. (Noch nicht gespeichert)
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_Found(System.Object,System.EventArgs)">
 <summary>
 Es wurde ein Objekt gefunden (F") und wird nun angezeigt
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_BeforeUpdate(System.Object,System.EventArgs)">
 <summary>
 Das Objekt wurde geändert und soll gespeichert werden. 
 Vor dem Speichern wird gepürft, ob die Einheit in OrgaBack richtig ausgewählt worden ist:
     
     - Artikel in Stück
     - Rohstoffe in kg
     - Rohstoffe(Erweiterung) in Meter(Folie) oder Stk (Verpackung) 

     .Cancel = True    Speichern nicht erlaubt
     .Cancel = False   Speichern erlaubt
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_Updated(System.Object,System.EventArgs)">
 <summary>
 Das Objekt wird gespeichert
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_Committed(System.Object,System.EventArgs)">
 <summary>
 Das Objekt ist gespeichert worden. Transaktion abgeschlossen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_BeforeDelete(System.Object,System.EventArgs)">
 <summary>
 Das Objekt soll gelöscht werden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_Deleted(System.Object,System.EventArgs)">
 <summary>
 Das Objekt ist gelöscht worden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Extendee_BeforeCopy(System.Object,System.EventArgs)">
 <summary>
 Das Objekt soll kopiert werden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.Initialize">
 <summary>
 Initialisierung des AddIns beim Starten von Orgasoft.
 </summary>
 <remarks>
 Achtung: Der FormController ist zu diesem Zeitpunkt noch nicht verfügbar!
 Dieser wird erst erzeugt und gesetzt, wenn das Fenster auch angezeigt werden soll.
 </remarks>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.InitializeContextTabs">
 <summary>
 Diese Routine wird immer aufgerufen, wenn ein DockingController vom passenden Typ erzeugt wird. 
 Hier können Einträge in die bestehenden Context-Tabs hinzugefügt werden. 
 Achtung: Das Hinzufügen darf nur beim ersten Mal passieren, die Context-Tabs werden gecached!
 </summary>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.ProvideInstance(System.String)">
 <summary>
 Liefert zu einem FormKey eine Instanz des UserControls zurück
 </summary>
 <param name="FormKey"></param>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.SubFormKeys">
 <summary>
 Liste aller FormKeys, für die das AddIn Unterfenster definiert
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.FormController">
 <summary>
 Liefert eine Instanz des FormControllers, über den das AddIn eigene Fenster öffnen und mit anderen Fenstern kommunizieren kann
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.GetKomponentenDaten">
 <summary>
 Ermittelt alle im _Extendee enthaltenen Daten, die für die Kopplung der Komponentendaten zu WinBack
 notwendig sind.
 Ob die Daten für WinBack relevant sind, wird durch die Angabe des Sortiments bestimmt:
     Ist der Artikel einem Sortiment zugeordnet, das eine Filiale vom Typ Produktion besitzt, werden die Daten
     ausgewertet und es wird True zurückgegeben.
 
     WinBack         Bezeichung                      OrgaBack
     =======         ==========                      ========
     KO_Nr_AlNum     Artikel-Nummer                  dbo.Artikel.ArtikelNr
     KO_Bezeichnung  Artikel-Bezeichnung             dbo.Artikel.KurzText
     KO_Type           0 - Artikel                   .Artikelgruppe =  0 (Gruppe Backwaren aus winback.ini)
                     102 - Rohstoff                  .Artikelgruppe = 40 (Gruppe Rohstoffe aus winback.ini)
     KO_Kommentar    Artikel-Kommentar               MFF156
     
     KA_Matchcode    ID für Nährwerte            
     Aufarbeitung(Backort)                           MFF200 (OrgaBack Readonly)
     KO_Nr           Index Rohstoff/Artikel          MFF201
     KA_RZ_Nr        Rezeptnummer zum Artikel        MFF202 (WinBack schreibt)
     RZ_Bezeichnung  Rezeptbezeichnung zum Artikel   MFF203 (WinBack schreibt)
 
     Hinweise2(03/0) Hinweise Artikel                nur WinBack
     Hinweise2(09/1) Zutatenliste Artikel            dbo.ArtikelDeklarationsTexte.Zutaten (WinBack schreibt)
     Hinweise2(09/2) Mehlzusammensetzung             MFF210 (WinBack schreibt)
 
     In WinBack nicht verwendet
     ==========================
     200.2           Dateiname Bild                  .ArtikelBildDateiname
     200.3           Kurztext                        .Kurztext
     200.7           Haltbarkeit                 
     200.8           Lagerung                        MFF151 nur OrgaBack - keine Synchr.
     200.9           Verkaufstage                    MFF150 nur OrgaBack - keine Synchr.
     200.17          Warengruppe
     200.20          Stk/Karton                  
     
     Hinweise2(10/1) Gebäck-Charakteristik           MFF152 nur OrgaBack - keine Synchr.
     Hinweise2(10/2) Verzehr-Tipps                   MFF153 nur OrgaBack - keine Synchr.
     Hinweise2(10/3) Wissenswertes                   MFF154 nur OrgaBack - keine Synchr.
     
 </summary>
</member>
<member name="P:WinBack.ob_Artikel_DockingExtension.MFFValue(Signum.OrgaSoft.FrameWork.ICollectionSubClass,System.Int32)">
 <summary>
 Setzt oder gibt den Wert des Multifunktions-Feldes mit der übergebenen Nummer zurück. Der Wert steht als Property-Array an der dritten Stellen
     PropertyValue(0) - ArtikelNummer
     PropertyValue(1) - FelddNr
     PropertyValue(2) - FilialNr
     PropertyValue(3) - Inhalt
     PropertyValue(4) - Bezeichnung
     PropertyValue(5) - Filialspezifisch (True/False)

 ''' Die Multifunktions-Felder, die WinBack betreffend sind per Definition nicht filialspezisch    
 </summary>
 <param name="ofil">ICollectionSubClass - Daten aus der Filiale 0 (Hauptfiliale)</param>
 <param name="MFF">Short - Indes auf MFF-Feld</param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_Artikel_DockingExtension.CheckEinheit(System.String,System.String)">
 <summary>
 Prüft ob in OrgaBack die richtige Einheit zur Type verwendet wird
 Der FehlerText wird als Komponente.LastError zurückgegeben.
     
 </summary>
 <param name="obKType"></param>
 <param name="obEinheit"></param>
 <returns></returns>
</member>
<member name="T:WinBack.Services.IRecipeProvider">
 <summary>
 Interface zum Auflösen von Rezepturen bzw. Stücklisten
 </summary>
</member>
<member name="M:WinBack.Services.IRecipeProvider.GetRecipe(System.String,System.Int16,System.Int16,System.String,System.Int16,System.Int16)">
 <summary>
 Ermittelt die Rezeptur und liefert die Bestandteile zurück
 </summary>
 <param name="ArticleNo">ArtikelNr der Rezeptur, die aufgelöst werden soll</param>
 <param name="Unit">Einheit der Rezeptur, die aufgelöst werden soll</param>
 <param name="Color">Farbe der Rezeptur, die aufgelöst werden soll</param>
 <param name="Size">Grösse der Rezeptur, die aufgelöst werden soll</param>
 <param name="Version">Variante der Rezeptur, die gelesen werden soll. 0: Filial- bzw. Haupt-Variante</param>
 <param name="Branch">Filiale, für die die Rezeptur aufgelöst werden soll.
 Bei Werten > 0 werden evtl. vorhandene filialspezifische Varianten berücksichtigt</param>
 <returns></returns>
</member>
<member name="T:WinBack.Services.IRecipeInfo">
 <summary>
 Interface, das eine Rezeptur bzw. Stückliste mit ihren Bestandteilen beschreibt
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeInfo.Version">
 <summary>
 Variante der Rezeptur, die gelesen wurde
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.Services.IRecipeInfo.Branch">
 <summary>
 Filiale, für die die Rezeptur ermittelt wurde
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeInfo.RecipeType">
 <summary>
 Art der Rezeptur
 -1/1=normale Rezeptur, 3=Produktionsrezeptur, 4=variable Rezeptur, 5=variable Produktionsrezeptur, 6=Pauschale
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeInfo.ProductionArticle">
 <summary>
 Gibt an, ob dies eine Produktions-Rezeptur ist (RecipeType 3 oder 5)
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeInfo.Variable">
 <summary>
 Gibt an, ob dies eine variable Rezeptur ist (RecipeType 4 oder 5)
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeInfo.Ingredients">
 <summary>
 Liste der Bestandteile dieser Rezeptur (als IList(of IRecipeIngredient))
 </summary>
</member>
<member name="T:WinBack.Services.IRecipeIngredient">
 <summary>
 Interface, das einen Rezeptur-Bestandteil beschreibt
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.RecipeType">
 <summary>
 Art der Rezeptur
 -1/1=normale Rezeptur, 3=Produktionsrezeptur, 4=variable Rezeptur, 5=variable Produktionsrezeptur, 6=Pauschale
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.ProductionArticle">
 <summary>
 Gibt an, ob dies eine Produktions-Rezeptur ist (RecipeType 3 oder 5)
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.Variable">
 <summary>
 Gibt an, ob dies eine variable Rezeptur ist (RecipeType 4 oder 5)
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.Amount">
 <summary>
 Menge, die von diesem Artikel im (direkt) übergeordneten Artikel enthalten ist
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.LossPercentage">
 <summary>
 Prozentualer Schwund, der beim Verarbeiten dieses Unter-Artikels zum übergeordneten Produkt anfällt.
 </summary>
</member>
<member name="P:WinBack.Services.IRecipeIngredient.Ingredients">
 <summary>
 Liste der Bestandteile dieses Artikels (als IList(of IRecipeIngredient)), 
 sofern dieser Artikel wiederum eine Rezeptur ist, andernfalls Nothing oder eine leere IList
 </summary>
</member>
<member name="T:WinBack.ob_RecipeProvider">
 <summary>
 Klasse zum Auflösen von Rezepturen bzw. Stücklisten
 </summary>
</member>
<member name="M:WinBack.ob_RecipeProvider.GetRecipe(System.String,System.Int16,System.Int16,System.String,System.Int16,System.Int16)">
 <summary>
 Ermittelt die Rezeptur und liefert die Bestandteile zurück. Die Rezeptgröße wird dabei immer auf
 ein Stück (Artikel-Nassgewicht) berechnet.
 </summary>
 <param name="ArticleNo">ArtikelNummer der Rezeptur, die aufgelöst werden soll</param>
 <param name="Unit">Einheit der Rezeptur, die aufgelöst werden soll. Ist immer in kg(11)</param>
 <param name="Color">Farbe, für WinBack nicht relevant. Ist immer 0</param>
 <param name="Size">Grösse, für WinBack nicht relevant. Ist immer Null</param>
 <param name="Version">Entspricht der Variante der Rezeptur, die gelesen werden soll. 0: Filial- bzw. Haupt-Variante</param>
 <param name="Branch">Filiale, für die die Rezeptur aufgelöst werden soll. Bei Werten > 0 werden evtl. vorhandene filialspezifische Varianten berücksichtigt</param>
 <returns></returns>
</member>
<member name="T:WinBack.ob_RecipeInfo">
 <summary>
 Klasse, die eine Rezeptur mit ihren Bestandteilen beschreibt
 </summary>
</member>
<member name="M:WinBack.ob_RecipeInfo.#ctor(System.String,System.Int16,System.String,System.Int16,System.Int16)">
 <summary>
 Konstruktor. Liest die Artikel-Stammdaten aus der WinBack-Datenbank. Wenn eine Rezept mit dem Artikel
 verknüpft ist, wird diese aus der WinBack-Datenbank gelesen.
 </summary>
 <param name="ArticleNo">ArtikelNummer der Rezeptur, die aufgelöst werden soll</param>
 <param name="Version">Versions-Nummer entspricht der Variante in WinBack - 1</param>
 <param name="Branch">Filiale, für die die Rezeptur aufgelöst werden soll. Bei Werten > 0 werden evtl. vorhandene filialspezifische Varianten berücksichtigt</param>
</member>
<member name="P:WinBack.ob_RecipeInfo.ArticleNo">
 <summary>
 ArtikelNummer der Rezeptur, die aufgelöst werden soll
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Branch">
 <summary>
 Filiale, für die die Rezeptur aufgelöst werden soll. Bei Werten > 0 werden evtl. vorhandene filialspezifische Varianten berücksichtigt
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Color">
 <summary>
 Farbe. Wird in WinBack nicht verwendet. Ist immer = 0
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Size">
 <summary>
 Size. Wird in WinBack nicht verwendet. Ist immer Null
 In der Kopfzeile wird der Wert aus dem Aufruf zurücgegeben
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Unit">
 <summary>
 Einheit der Rezeptur, die aufgelöst werden soll
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Version">
 <summary>
 Version der Rezeptur, die gelesen wurde. Standard bei OrgaBack ist Variante 0
 </summary>
</member>
<member name="P:WinBack.ob_RecipeInfo.Variante">
 <summary>
 Variante WinBack. Entspricht der Version + 1.
 Variante 0 wird zu Version 0 !! (Sauerteig)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Ingredients">
 <summary>
 Liste der Bestandteile dieser Rezeptur (als IList(of IRecipeIngredient))
 </summary>
</member>
<member name="P:WinBack.ob_RecipeInfo.RecipeType">
 <summary>
 Art der Rezeptur. In WinBack immer (5)variable Produktionsrezeptur
     1=normale Rezeptur
     3=Produktionsrezeptur
     4=variable Rezeptur
     5=variable Produktionsrezeptur
     6=Pauschale
 </summary>
</member>
<member name="P:WinBack.ob_RecipeInfo.ProductionArticle">
 <summary>
 Rezept-Type Produktion
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeInfo.Variable">
 <summary>
 Rezept-Type variabel
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.ob_RecipeIngredient">
 <summary>
 Klasse, die einen Rezeptur-Bestandteil beschreibt
 </summary>
</member>
<member name="P:WinBack.ob_RecipeIngredient.ArticleNo">
 <summary>
 Rohstoff-Nummer der Rezept-Zeile
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Version">
 <summary>
 Version der Rezeptur, die gelesen wurde. Standard bei OrgaBack ist Variante 0
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Variante">
 <summary>
 Rezept-Type variabel
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Amount">
 <summary>
 Amount. Sollwert der Rezept-Zeile in kg (Unit 11)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Unit">
 <summary>
 Einheit der Rezept-Zeile. Wird immer in kg ausgegeben
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.LossPercentage">
 <summary>
 Back-/Zuschnittverlust der Rezeptzeile
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Ingredients">
 <summary>
 Liste aller Rezeptbestandteile eines verknüpften Rezeptes. (Rezept-im-Rezept)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Color">
 <summary>
 Farbe. Wird in WinBack nicht verwendet. Ist immer = 0
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Size">
 <summary>
 Größe. Wird in WinBack nicht verwendet. Ist immer Null
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.RecipeType">
 <summary>
 Art der Rezeptur. In WinBack immer (5)variable Produktionsrezeptur
     0=keine Rezeptur !!
     1=normale Rezeptur
     3=Produktionsrezeptur
     4=variable Rezeptur
     5=variable Produktionsrezeptur
     6=Pauschale
 </summary>
</member>
<member name="P:WinBack.ob_RecipeIngredient.ProductionArticle">
 <summary>
 Rezept-Type Produktion
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_RecipeIngredient.Variable">
 <summary>
 Rezept-Type variabel
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>
 Objekt Rezeptur instanzieren.
 
 Optional kann eine Änderungs-Nummer mit übergeben werden, dann werden die Rezept-Daten aus der Historie geladen.
 Eine Änderung der Rezeptur ist dann nicht möglich
 </summary>
 <param name="RzNummer"></param>
 <param name="RzVariante"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.BtnDrucken_Click(System.Object,System.EventArgs)">
 <summary>
 Rezeptur drucken.
 Der Ausdruck erfolgt über Printer-Sub-Funktion (List+Label)
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.BtnLoeschen_Click(System.Object,System.EventArgs)">
 <summary>
 Aktuelle Rezeptur löschen.
 Löschen ist nur möglich, wenn die Rezeptur nicht mehr verwendet wird und, bei Variante Eins, wenn keine weitere Variante existiert
 Vor dem Löschen erfolgt eine Sicherheits-Abfrage
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.BtnNwt_Click(System.Object,System.EventArgs)">
 <summary>
 Anzeige der berechneten Nährwerte der Rezeptur.
 Berechnung über ktTyp301(Get) im Root-Rezeptschritt. Aufbau und Anzeige des DatenGrid in Subroutine nwtGrid()
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.NwtGrid">
 <summary>
 Anzeige der berechneten Nährwerte der Rezeptur im DatenGrid.
 
 Die Daten werden im einem ein-dimensionalen Array vorbereitet und dann in einem eigenen Objekt (abgeleitet von DataGridView) angezeigt.
 
 Das Array besteht aus dem Grundgerüst (Nummer, Bezeichnung, Einheit, Gruppe). Diese Daten kommen aus dem Hash-Table kt301Param(Nr)
 Die Nährwert-Info kommt aus dem Array ktTyp301.Wert von Rezept._RootRezeptSchritt. 
 Die Berechnung der Nährwerte startet über ktTyp301(Get) im RootRezeptschritt (Rekursiv) über alle unterlagerten Rezeptschritte.
 </summary>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.BtnHinweise_Click(System.Object,System.EventArgs)">
 <summary>
 Anzeige/Eingabe/Änderung des Text-Verarbeitungs-Hinweises für die Rezeptur.
 Die Verarbeitungshinweise werden in der Tabelle winback.Hinweise2 abgelegt.
 'TODO evtl. Unterscheidung in verschiedene Fremdsprachen.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.BtnClose_Click(System.Object,System.EventArgs)">
 <summary>
 Fenster schliessen
 Änderungen an der Rezeptur werden gespeichert
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.wb_Rezept_Rezeptur_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 Fenster schliessen. Falls notwendig Daten sichern. Beim Schliessen werden geänderte Rezepthinweise, Rezepturdaten und Rezeptkopf-Daten
 in die MySQL-DB geschrieben.
 Beim Sichern der Rezepturdaten wird auch eine Kopie der aktuellen Rezeptur in die Rezept-Historie geschrieben
 Mit dem Sicherung des Rezeptkopfes wird der Änderungs-Index erhöht (falls die Rezeptur geändert wurde).
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.TextHinweise_Click(System.Object,System.EventArgs)">
 <summary>
 Anzeige der Rezept-Hinweise.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_CellDoubleClick(System.Object,System.EventArgs)">
 <summary>
 Doppel-Click auf eine Rezept-Zeile öffnet das Rezept-im-Rezept, falls vorhanden.
 
 Wenn VirtualTree.RowSelect = False ist, muss die Rezeptnummer über
     Dim RezeptNr As Integer = DirectCast(sCellWidget.Tree.SelectedItem, wb_Rezeptschritt).RezeptNr
 ermittelt werden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_SelectionChanging(System.Object,Infralution.Controls.VirtualTree.SelectionChangingEventArgs)">
 <summary>
 Verhindert, dass einzelne Zellen markiert werden 
 (Infralution Support): handle the SelectionChanging event and set Cancel to true. This prevents any selection occurring
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_GetContextMenuStrip(System.Object,Infralution.Controls.VirtualTree.GetContextMenuStripEventArgs)">
 <summary>
 Rechte-Maus-Click auf eine Zeile im VirtualTree.
 
 Über e.Row.Item wird die entsprechende Zeile(wb_Rezeptschritt) im Grid ermittelt.
 Abhängig vom Komponenten-Typ werden verschiedene Aktionen erlaubt/ausgelöst. (Popup-Menu)
 Wenn die aktuelle Rezeptzeile ein Child eine Rezeptschrittes ist (Wassertemperatur o.ä.) 
 wird auf den jeweiligen Parent verwiesen.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_SetFontStyle(Infralution.Controls.Style@)">
 <summary>
 Setzt den Font.Style für die angegebene Zelle auf Bold+Italic
 Anzeige der geänderten Werte in der Rezept-Historie
 </summary>
 <param name="ColumnStyle"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueKomponente(System.Object,System.EventArgs)">
 <summary>
 Neue Komponente(Auswahl) in leeres Rezept ein- oder an eine Rezeptur anfügen (Click in das leere Feld unterhalb VirtualTree)
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueKomponenteDavor(System.Object,System.EventArgs)">
 <summary>
 Neue Komponente(Auswahl) vor der aktuellen Zeile (_Rezeptschritt) einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueKomponenteDanach(System.Object,System.EventArgs)">
 <summary>
 Neue Komponente(Auswahl) nach der aktuellen Zeile einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueProduktionsStufe(System.Object,System.EventArgs)">
 <summary>
 Neue Produktions-Stufe in ein leeres Rezept ein- oder an eine Rezeptur anfügen (Click in das leere Feld unterhalb VirtualTree)
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeuerKesselNachProduktionsStufe(System.Object,System.EventArgs)">
 <summary>
 Neuen Kessel nach Produktions-Stufe einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeuerKesselDavor(System.Object,System.EventArgs)">
 <summary>
 Neuen Kessel oberhalb der aktuellen Kessel-Zeile einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeuerKesselDanach(System.Object,System.EventArgs)">
 <summary>
 Neuen Kessel unterhalb der aktuellen Kessel-Zeile einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueProduktionsStufeDanach(System.Object,System.EventArgs)">
 <summary>
 Neue Produktions-Stufe nach demr aktuellen Zeile (_Rezeptschritt) einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueProduktionsStufeDavor(System.Object,System.EventArgs)">
 <summary>
 Neuer Kessel nach Produktions-Stufe einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueTextKomponente(System.Object,System.EventArgs)">
 <summary>
 Neue Text-Komponente in ein leeres Rezept ein- oder an eine Rezeptur anfügen (Click in das leere Feld unterhalb VirtualTree)
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueTextKomponenteDavor(System.Object,System.EventArgs)">
 <summary>
 Neue Text-Komponente vor der aktuellen Zeile (_Rezeptschritt) einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_NeueTextKomponenteDanach(System.Object,System.EventArgs)">
 <summary>
 Neue Text-Komponente nach der aktuellen Zeile einfügen
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_KneterRezept_Speichern(System.Object,System.EventArgs)">
 <summary>
 Aktuelles Kneter-Rezept speichern in Tabelle RohParams
 
 Alle Child-Steps unterhalb der Kneter-Kopfzeile werden als neues Rezept in der Tabelle RohParams
 gespeichert
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VTP_Delete(System.Object,System.EventArgs)">
 <summary>
 Aktuelle Rezeptzeile löschen (Popup oder DEL-Key)
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VT_AuswahlRohstoff(WinBack.wb_Rohstoffe_Shared.AnzeigeFilter)">
 <summary>
 Anzeige der Rohstoff-Liste. 
 Auswahl eines Rohstoffes für die Funktionen Einfügen, Anfügen, ..
 
 Der Rezeptschritt hat keine Verbindung zur Rezeptur und wird nur zur Auswahl des Rohstoffes verwendet.
 Die Verknüpfung erfolgt über Rezeptschritt.Insert
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VT_Aktualisieren">
 <summary>
 Anzeige im Virtual-Tree aktualisieren
 </summary>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VT_AddChildSteps(WinBack.wb_Rezeptschritt@)">
 <summary>
 Wenn der neu eingefügte Rezeptschritt mehrere Zeilen haben kann werden diese aus der KomponTypen-Tabelle
 ausgelesen und als Child-Rezeptschritte eingefügt.
 
 Kneter-Zeilen werden aus der Tabelle RohParams eingefügt
 </summary>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_CellClick(System.Object,System.EventArgs)">
 <summary>
 Click auf eine Rezept-Zeile
 Der aktuelle Rezeptschritt wird gespeichert. Damit können über die Tastatur INSERT/DEL die Rezeptschritte eingefügt/gelöscht werden.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Rezept_Rezeptur.VirtualTree_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Taste gedrück innerhalb des virtual Tree.
 Anhand des Tasten-Codes wird die entsprechende Sub-Routine ausgeführt (INSERT/DEL)
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:WinBack.ob_User_DockingExtension.ContextTabs">
 <summary>
 Falls die Extension ein eigenes Context-Ribbon zum bestehenden Ribbon hinzufügen möchte, kann sie dieses hier zurückliefern
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_User_DockingExtension.ExtendedType">
 <summary>
 Klasse, deren Docking-Layout erweitert werden soll (Mitarbeiter)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_User_DockingExtension.Extendee">
 <summary>
 Referenz auf die Framework-Klasse, die im Docking-Fenster derzeit angezeigt wird
 </summary>
</member>
<member name="M:WinBack.ob_User_DockingExtension.Initialize">
 <summary>
 Initialisierung des AddIns beim Starten von Orgasoft.
 </summary>
 <remarks>
 Achtung: Der FormController ist zu diesem Zeitpunkt noch nicht verfügbar!
 Dieser wird erst erzeugt und gesetzt, wenn das Fenster auch angezeigt werden soll.
 </remarks>
</member>
<member name="M:WinBack.ob_User_DockingExtension.InitializeContextTabs">
 <summary>
 Diese Routine wird immer aufgerufen, wenn ein DockingController vom passenden Typ erzeugt wird. 
 Hier können Einträge in die bestehenden Context-Tabs hinzugefügt werden. 
 Achtung: Das Hinzufügen darf nur beim ersten Mal passieren, die Context-Tabs werden gecached!
 </summary>
</member>
<member name="M:WinBack.ob_User_DockingExtension.ProvideInstance(System.String)">
 <summary>
 Liefert zu einem FormKey eine Instanz des UserControls (Mitarbeiter) zurück
 </summary>
 <param name="FormKey"></param>
 <returns></returns>
</member>
<member name="P:WinBack.ob_User_DockingExtension.SubFormKeys">
 <summary>
 Liste aller FormKeys, für die das AddIn Unterfenster definiert
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_User_DockingExtension.FormController">
 <summary>
 Liefert eine Instanz des FormControllers, über den das AddIn eigene Fenster öffnen und mit anderen Fenstern kommunizieren kann
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_User.Changed">
 <summary>
 Eine der Mitarbeiter-Eigenschaften wurde geändert
 </summary>
 <returns>
 True  - Eingenschaften sind geändert worden, der Datensatz muss gespeichert werden
 False - keine Änderung, kein Speichern notwendig
     </returns>
</member>
<member name="P:WinBack.wb_User.Name">
 <summary>
 Mitarbeiter-Name. String max 250 Zeichen
 Tabelle winback.ItemParameter.IP_Wert4Str
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_User.iGruppe">
 <summary>
 Mitarbeiter-Gruppe. Numerisch maximal 10 Stellen
 Tabelle winback.ItemParameter.IP_ItemID
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_User.Passwort">
 <summary>
 Mitarbeiter Passwort. Numerisch maximal 10 Stellen
 Tabelle winback.ItemParameter.IP_Wert1int
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_User.LoadData(WinBack.wb_DataGridView)">
 <summary>
 User-Detail-Daten laden
 </summary>
 <param name="dataGridView"> DataGrid Mitarbeiter-Liste</param>
</member>
<member name="M:WinBack.wb_User.SaveData(WinBack.wb_DataGridView)">
 <summary>
 User-Detail-Daten speichern. 
 Gibt True zurück, wenn sich die Daten geändert haben
 IP_lfd_Nr ist UniqueKey und entspricht dem Passwort
 </summary>
 <param name="dataGridView"> DataGrid Mitarbeiter-Liste</param>
 <returns>
 True  - Eigenschaften des aktuelle User haben sich geändert
 False - Keine Änderung
 </returns>
</member>
<member name="M:WinBack.wb_User.AddNew">
 <summary>
 Neuen Mitarbeiter anlegen. In der Datenbank wird ein Dummy-Eintrag eingefügt
 Die aufrufende Funktion muss für die Aktualisierung der offenen Views sorgen.
 Die Mitarbeiter-Nummer ist Unique-Key. Wenn die Mitarbeiter-Nummer schon vorhanden ist, wird
 False zurückgeliefert.
 </summary>
 <returns>
 True - Einfügen war erfolgreich
 False - Fehler beim Einfügen</returns>
</member>
<member name="M:WinBack.wb_User.AddNew(System.String,System.String,System.String)">
 <summary>
 Neuen Mitarbeiter anlegen.
 Die Mitarbeiter-Nummer ist Unique-Key. Wenn die Mitarbeiter-Nummer schon vorhanden ist, wird
 False zurückgeliefert.
 </summary>
 <param name="Name"> String Mitarbeiter-Name</param>
 <param name="Passwort"> String Mitarbeiter-Passwort numerisch max. 10 Stellen</param>
 <param name="Gruppe">String - User-Gruppe (1..9, 99)</param>
 <returns>
 True - Einfügen war erfolgreich
 False - Fehler beim Einfügen
 </returns>
</member>
<member name="M:WinBack.wb_User.Update(System.String,System.String,System.String,System.String)">
 <summary>
 Mitarbeiterdaten ändern.
 Die Mitarbeiter-Nummer ist Unique-Key. Wenn die Mitarbeiter-Nummer nicht vorhanden ist, wird
 False zurückgeliefert.
 </summary>
 <param name="Name"> String Mitarbeiter-Name</param>
 <param name="OldPasswort"> String Mitarbeiter-Passwort (alt) numerisch max. 10 Stellen</param>
 <param name="NewPasswort"> String Mitarbeiter-Passwort (neu) numerisch max. 10 Stellen</param>
 <param name="Gruppe">String - User-Gruppe (1..9, 99)</param>
 <returns>
 True - Ändernn war erfolgreich
 False - Fehler beim Ändernn
 </returns>
</member>
<member name="M:WinBack.wb_User.Delete(System.String)">
 <summary>
 Eintrag Mitarbeiter löschen. Das Löschen der Mitarbeiter ist in WinBack unkritisch,
 da in allen Verweisen auch der Name im Klartext mitgespeichert wird.
 In Verbindung mit OrgaBack ist ein Löschen der Datensätze nicht vorgesehen.
 </summary>
 <param name="Passwort"> String Mitarbeiter-Passwort numerisch max. 10 Stellen</param>
</member>
<member name="M:WinBack.wb_User.Exist(System.String)">
 <summary>
 Prüft ob ein Mitarbeiter mit [Passwort] schon existiert
 </summary>
 <param name="Passwort"></param>
 <returns>
 True - Passwort ist schon vergeben
 False - Passwort ist nicht verwendet
 </returns>
</member>
<member name="P:WinBack.wb_Rohstoff.Changed">
 <summary>
 Eine der Rohstoff-Eigenschaften wurde geändert
 </summary>
 <returns>
 True  - Eingenschaften sind geändert worden, der Datensatz muss gespeichert werden
 False - keine Änderung, kein Speichern notwendig
     </returns>
</member>
<member name="T:WinBack.wb_sql_Functions">
 <summary>
 Sammlung von Statischen SQL-Funktionen
 </summary>
</member>
<member name="M:WinBack.wb_sql_Functions.ping">
 <summary>
 MySql-Ping. Verbindung zur Datenbank öffnen und einen Ping absenden.
 Wenn die Verbindung funktioniert wird True zurückgegeben.
 </summary>
 <returns>True - Wenn die Verbindung zur Datenbank funktioniert
 False - Wenn keine Verbindung zur Datenbank aufgebaut werden kann</returns>
</member>
<member name="M:WinBack.wb_sql_Functions.MsDoubleToString(System.Double)">
 <summary>
 Wandelt einen Double-Wert in einen String. Dezimal-Komma werden ersatzt durch Dezimal-Punkte
 </summary>
 <param name="d"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_sql_Functions.MySQLdatetime(System.DateTime)">
 <summary>
 Wandelt date(time) in MySQL-DateTime im Format YYYY-MM-DD HH:MM:SS um
 </summary>
 <param name="d">date</param>
 <returns>String - im MySQL-DateTime-Format</returns>
</member>
<member name="M:WinBack.wb_sql_Functions.MsSQLShortDate(System.DateTime)">
 <summary>
 Wandelt date(time) in SQL-DateTime im Format YYYYMMDD um
 </summary>
 <param name="d">date</param>
 <returns>String - im MySQL-DateTime-Format</returns>
</member>
<member name="M:WinBack.wb_sql_Functions.MySQLBoolean(System.String)">
 <summary>
 Wandelt einen SQL-Datenfeld in Boolean um
     1   -   True
     0   -   False
 </summary>
 <param name="s">String - Wert</param>
 <returns>Boolean - Result</returns>
</member>
<member name="M:WinBack.wb_sql_Functions.getKomponParam(System.Int32,System.Int32,System.String)">
 <summary>
 Liest der Parameter-Wert aus der Tabelle KomponParams aus.
 Wenn der Wert oder Datensatz nicht existiert, wird ein leeren String zurückgegeben.
 </summary>
 <param name="KomponentenNummer">Integer - Komponenten-Nummer(intern)</param>
 <param name="ParameterNummer">Integer - Parameter-Nummer</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_sql_Functions.getNewKomponNummer">
 <summary>
 Ermittelt die nächste freie interne Komponenten-Nummer (KO_Nr) aus der Tabelle Komponenten
 </summary>
 <returns>Integer - nächste freie Komponenten-Nummer</returns>
</member>
<member name="M:WinBack.wb_sql_Functions.getNewRezeptNummer">
 <summary>
 Ermittelt die nächste freie interne Rezept-Nummer (RZ_Nr) aus der Tabelle Rezepte
 </summary>
 <returns>Integer - nächste freie Rezept-Nummer</returns>
</member>
<member name="F:WinBack.wb_Global.UNDEFINED">
 <summary>
 Wert ist undefiniert
 </summary>
</member>
<member name="T:WinBack.wb_Global.ArtikelMarker">
 <summary>
 Markierung der Artikel/Komponentendaten (KA_Artikel_Typ)
     -   Nährwertinfo fehlerhaft/nicht vollständig
     -   Nährwertinfo muss neu berechnet werden (Update Nährwerte Cloud)
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp200">
 <summary>
 Produkt-Information
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp201">
 <summary>
 Verarbeitungshinweise
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp202">
 <summary>
 Kalkulation
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp210">
 <summary>
 Froster
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp220">
 <summary>
 Gare
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp300">
 <summary>
 Parameter Produktion
 </summary>
</member>
<member name="F:WinBack.wb_Global.maxTyp301">
 <summary>
 Nährwerte
 </summary>
</member>
<member name="F:WinBack.wb_Global.MFF_Version">
 <summary>
 Konstanten für MultifunktionsFelder Artikel
 </summary>
not USED:

Public Const MFF_Haltbarkeit = 102
Public Const MFF_Lagerung = 103
Public Const MFF_Verkaufstage = 104
Public Const MFF_VerarbeitungsHinweisArtikel = 208
Public Const MFF_MatchCode = 227
Public Const MFF_Zutatenliste = 209
Public Const MFF_Gebäckcharakeristik = 211
Public Const MFF_Verzehrtipps = 212
Public Const MFF_Wissenswertes = 213

</member>
<member name="F:WinBack.wb_Global.TA_Undefined">
 <summary>
 Konstanten für die Berechnung der Teigausbeute
 Werte für die Komponenten-Parameter
 </summary>
</member>
<member name="M:WinBack.wb_Rezept_Liste.RefreshData(System.Object)">
 <summary>
 Liste neu laden nach Löschen/Ändern Rezeptur
 </summary>
</member>
<member name="P:WinBack.wb_Rezept_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rezept_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rohstoffe_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Rohstoffe_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_User_Liste.SelectData(System.Int32,System.String)">
 <summary>
 Einen Datensatz in der Mitarbeiter-Liste suchen. Wenn der Datensatz gefunden wurde, wird True zurückgegeben.
 </summary>
 <param name="col"> (Integer) Spalte in der gesucht werden soll</param>
 <param name="s">   (String)  Suchbegriff</param>
 <returns>
 True - Wert gefunden
 False - Wert nicht gefunden</returns>
</member>
<member name="P:WinBack.wb_Artikel_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Artikel_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_User_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_User_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="T:WinBack.wb_DataGridView">
 <summary>
Ableitung der Klasse DataGridView.
Enthält die Verbindung von DataGridView zu
wahlweise MySQl(winback) oder MSSQL(OrgasoftMain)

LoadData(sql) lädt die entsprechenden Daten ins Grid
Über Filter kann eine zusätzliche Filter-Eigenschaft
angeben werden.
Nach tDataChangedTime wird der Event HasChanged ausgelöst,
damit kann das aufrufende Programm die entsprechenden
Felder abrufen und anzeigen. (Funktion Field)

Änderungen über Field werden nach Aufruf der Update-Funtkion
in die Datenbank geschrieben.
Dazu muss der MySQL-Data-Client der MySQL-Version angepasst
sein, sonst funktioniert die Update-Anweisung (automatisch
generiert) nicht. 
 </summary>
</member>
<member name="M:WinBack.wb_DataGridView.LoadData(System.String,System.String,WinBack.wb_Sql.dbTable)">
 <summary>
Läd die Daten aus der Datenbank in das DataGridView.
Die Spaltenüberschriften werden aus ColNames (Public)
in das DataView und in das Pop-Up-Menu eingetragen
 </summary>
 <param name="sSql">String SQL-Abfrage der Listen-Elemente</param>
 <param name="sGridName">String DataGrid-Name läd die Spalten-Einstellungen aus winback.ini</param>
 <param name="table">dbTable Datenbank Tabelle winback/wbdaten</param>
</member>
<member name="M:WinBack.wb_DataGridView.RefreshData">
 <summary>
 Daten im Grid neu laden
 </summary>
</member>
<member name="P:WinBack.wb_DataGridView.tDataChangedTime">
 <summary>
 x Sekunden nach Änderung des Datensatz-Zeigers wird der
 Event HasChanged() ausgelöst
 </summary>
</member>
<member name="P:WinBack.wb_DataGridView.Filter">
 <summary>
 zusätzliche Filter-Bedingung (SQL)
 </summary>
</member>
<member name="M:WinBack.wb_DataGridView.UpdateDataBase">
 <summary>
 Update Datenbank nach Änderung eines Datenfeldes.
 Der DataHasChanged-Event muss unterdrückt werden, sonst treten beim Schliessen der Forms Fehler auf, da dann
 mit x Sekunden Zeitverzögerung der Change-Event auftritt und ins Leere läuft.
 </summary>
</member>
<member name="P:WinBack.wb_DataGridView.Field(System.String)">
 <summary>
 Datenbank-Feld lesen/ändern
 </summary>
 <param name="FieldName">String Feldname in Datenbank</param>
 <returns></returns>
</member>
<member name="P:WinBack.wb_DataGridView.iField(System.String)">
 <summary>
 Datenbank-Feld lesen/ändern
 </summary>
 <param name="FieldName">String Feldname in Datenbank</param>
 <returns>Integer</returns>
</member>
<member name="P:WinBack.wb_DataGridView.x8859_5_FieldName">
 <summary>
 Feld-Name des Datenbank-Feldes, das bei Fremdsprachen konvertiert werden muss (ISO8859-5 nach UTF-8)
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_DataGridView.mContextMenu_Click(System.Object,System.EventArgs)">
 <summary>
 Popup-Menu Spalten ein/ausblenden
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DataGridView.SaveToDisk(System.String)">
 <summary>
 Spaltenbreiten in winback.ini schreiben
 </summary>
 <param name="sGridName">String - Name des Grid. Speichert die Spaltenbreiten in winback.ini in der Sektion [GridName]</param>
</member>
<member name="M:WinBack.wb_DataGridView.LoadFromDisk(System.String)">
 <summary>
 Spaltenbreiten aus winback.ini lesen
 </summary>
 <param name="sGridName">String - Name des Grid. Läd die Spaltenbreiten aus winback.ini in der Sektion [GridName]</param>
</member>
<member name="M:WinBack.wb_DataGridView.SelectData(System.Int32,System.String)">
 <summary>
 Einen Datensatz im Grid suchen. Wenn der Datensatz gefunden wurde, wird die entsprechende Zeile markiert und
 nach der Zeit tDataChangedTime der Event HasChanged ausgelöst.
 </summary>
 <param name="col"> (Integer) Spalte in der gesucht werden soll</param>
 <param name="s">   (String)  Suchbegriff</param>
 <returns>
 True - Wert gefunden
 False - Wert nicht gefunden</returns>
</member>
<member name="E:WinBack.wb_DataGridView.HasChanged">
 <summary>
 Datensatz-Zeiger wurde geändert. Verbundene Text-Felder auslesen und anzeigen
 </summary>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_CurrentCellChanged(System.Object,System.EventArgs)">
 <summary>
Start Timer nach Änderung Datensatz-Zeiger
 x Sekunden nach Änderung des Datensatz-Zeigers wird der
 Event HasChanged() ausgelöst.
 
 Der Timer wird nicht gestartet, wenn der Event unterdrückt werden soll (_SuppressChangeEvent), z.B. beim
 Speichern des Datensatzes im Grid (UpdateDataBase)
 </summary>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Key-Press im Grid - Filter-Kriterium in Header anzeigen
 Filter-String bilden und anwenden
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_ColumnHeaderMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
 <summary>
 Maus-Klick auf Header-Zeile 
 Sortierkriterium umschalten
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_CellFormating(System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
 <summary>
 Ausgabe des Datenbank-Feldes.
 Es wird anhand des Feldnamens geprüft, ob das Datenbank-Feld aus der MySQL-Datenbank von iso-8859-5 nach utf-8 konvertiert werden muss.
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_DataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
 <summary>
 Abfangen den Data-Error-Meldungen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_DataGridView.DataGridView_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 Beim Doppelclick auf die Datenzeile wird vorher der Event HasChanged ausgelöst. Damit werden die Daten sicher geladen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:WinBack.wb_Functions">
 <summary>
 Beschreibung:
 Sammlung von Statischen Funktionen
 </summary>
</member>
<member name="M:WinBack.wb_Functions.KeyToString(System.Char,System.String@)">
 <summary>
 Erzeugt einen String aus Key-Down-Ereignissen
 alle gültigen Zeichen werden an den String angehängt,
 ungültige und Steuerzeichen werden mit False zurück-
 gegeben (KeyDown-Handler = False)
 </summary>
 <param name="KeyCode"> - Char KeyCode der gedrückten Taste</param>
 <param name="s">- String alle gültigen Zeichen aus KeyCode</param>
 <returns>False wenn Steuerzeichen erkannt werden</returns>
</member>
<member name="M:WinBack.wb_Functions.ConvertJSONTimeStringToDateTime(System.String)">
 <summary>
 Wandelt einen String im WinBack-Cloud-Datumsformat (yyyymmddHHmmss) in DateTime um.
 Wenn die Konvertierung feherhaft ist, wird der 22.11.1964 00:00:00 zurückgegeben.
 </summary>
 <param name="JSONTimeString"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.ConvertDataLinkTimeStringToDateTime(System.String)">
 <summary>
 Wandelt die Datum/Uhrzeit-Angabe aus DataLink (Created 2013-09-03T08:14:03)
 in DateTime um
 </summary>
 <param name="DataLinkTimeString"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.StringtoAllergen(System.String)">
 <summary>
 Wandelt einen String in AllergenInfo um. Wenn der String umgültig ist wird ERR zurückgegeben
 </summary>
 <param name="s"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.AllergenToString(WinBack.wb_Global.AllergenInfo)">
 <summary>
 Wandelt die AllergenInfo in einen String um.
 </summary>
 <param name="a"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.LogTypeToString(WinBack.wb_Global.LogType)">
 <summary>
 Wandelt LogType in String
 </summary>
 <param name="LogType"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.IntToKomponType(System.Int32)">
 <summary>
 Wandelt einen Integer-Wert in einen Komponenten-Typ um. Wenn der Integer-Wert ungültig ist,
 wird KO_TYPE_UNDEFINED zurückgegeben
 </summary>
 <param name="KO_Type"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.TypeIstSollMenge(WinBack.wb_Global.KomponTypen,System.Int32)">
 <summary>
 Ermittelt, ob Typ und Parameter-Nummer einen Gewichts-relevanten Sollwert enthalten.
     Automatik-Komponenten (Produktion und Sauerteig)
     Hand-Verwiegung 
     Wasser-Sollmenge (Produktion und Sauerteig)
     Anstellgut Sauerteig
 </summary>
 <param name="Type"></param>
 <param name="Param"></param>
 <returns>Boolean - True wenn der Typ einen Sollwert enthält, False wenn der Typ keinen Sollwert (Gewicht/Menge/Länge) enthält, der umgerechnet werden muss/kann</returns>
</member>
<member name="M:WinBack.wb_Functions.TypeIstSollWert(WinBack.wb_Global.KomponTypen,System.Int32)">
 <summary>
 Ermittelt ob Type und Parameter-Nummer einen (anderen)Sollwert enthalten. (Keinen Gewichtswert!)
 </summary>
 <param name="Type"></param>
 <param name="Param"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.TypeIstText(WinBack.wb_Global.KomponTypen)">
 <summary>
 Ermittelt ob Type und Parameter-Nummer einen Text als Sollwert enthalten.
 </summary>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.TypeHatEinheit(WinBack.wb_Global.KomponTypen)">
 <summary>
 Ermittelt anhand der Komponenten-Type ob eine Einheit(Text) ausgeben werden soll.
 </summary>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.TypeHasChildSteps(WinBack.wb_Global.KomponTypen)">
 <summary>
 Ermittelt anhand der Komponenten-Type ob Child-Steps vorhanden sind, oder ob beim Einfügen in
 Rezepturen mehrere Zeilen erforderlich sind.
 (Wasser/Eis/Kneter/Produktions-Stufe/Kessel)
 </summary>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.StringTokt301Gruppe(System.String)">
 <summary>
 Wandelt einen String in kt301Gruppen um. Beim Einlesen der Hash-Table aus der Tabelle KomponTypen
 </summary>
 <param name="s"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.kt301GruppeToString(WinBack.wb_Global.ktTyp301Gruppen)">
 <summary>
 Wandelt eine kt301Gruppe in einen String um. (AnzeigeText)
 </summary>
 <param name="k"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.obKtypeToKType(System.String)">
 <summary>
 Wandelt die Artikelgruppe aus OrgaBack in die WinBack-Komponenten-Type um.
 Die Artikelgruppen in OrgaBack sind frei definiert. Die Zuordnung von Artikelgruppe zu Komponenten-Type wird in winback.ini festgelegt
 (Stammdaten-Gruppen-Artikelgruppen)
     [OrgaBack].[dbo].[Artikelgruppe]
 </summary>
 <param name="obKType"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.DatenLinkToIndex(System.String)">
 <summary>
 Wandelt die DatenLink-Nährwert und Allergen-Bezeichnungen in 
 WinBack-Index-Nummern um
 </summary>
 <param name="name"></param>
 <returns>index (Integer)</returns>
</member>
<member name="M:WinBack.wb_Functions.MinMaxOptChargeToString(WinBack.wb_Global.MinMaxOptChargenError)">
 <summary>
 Gibt den entsprechenden Fehlertext zum Fehler-Code bei der Eingabeprüfung von 
 Minimal/Optimal/Maximal-Charge zurück
 </summary>
 <param name="ErrCode"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.FormatStr(System.String,System.Int32,System.Int32,System.String)">
 <summary>
 Formatiert einen String mit der angegebenen Vorkomma und Nachkomma-Stelle
 </summary>
 <param name="value">Zahlenwert als String</param>
 <param name="VorKomma">Anzahl der Vorkomma-Stellen</param>
 <param name="NachKomma">Anzahl der Nachkomma-Stellen</param>
 <param name="Culture">Ländereinstellung (Default de-DE)</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.XRemoveSonderZeichen(System.String,System.Boolean)">
 <summary>
 Entfernt alle "störenden" Sonderzeichen aus einem String
     ' - wird ersatzlos gestrichen (verhindert Speichern eines Strings in DB)
 </summary>
 <param name="s"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.DoubleToXString(System.Double)">
 <summary>
 Wandelt einen Double-Wert in einen String um. Dabei wird das Dezimal-Trennzeichen als Punkt dargestellt !!!!
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.StrToDouble(System.String)">
 <summary>
 Wandelt einen String sicher in Float um. Das Zahlenformat kann US/DE sein. Punkte werden vor der Konvertierung in Koma umgewandelt.
 1000er - Trennzeichen sind nicht erlaubt.
 Wenn die Umwandlung per TryParse fehlschlägt (Result=False) wird die einfache Umwandlung per val() versucht. Damit können auch Werte
 umgewandelt werden, die Strings enthalten (z.B. 10kg)
 </summary>
 <param name="value"></param>
 <returns>Kovertierten String im Format Double</returns>
</member>
<member name="M:WinBack.wb_Functions.StrToInt(System.String)">
 <summary>
 Wandelt einen String sicher in Integer um. Wenn die Umwandlung fehlschlägt wird 0 zurückgegeben.
 </summary>
 <param name="value"></param>
 <returns>Konvertierten String im Format Integer</returns>
</member>
<member name="M:WinBack.wb_Functions.ValueToInt(System.Object)">
 <summary>
 Wandelt ein Objekt sicher in einen Integer-Wert um
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.ValueToDouble(System.Object)">
 <summary>
 Wandelt ein Objekt sicher in einen Float-Wert um
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.MySqlToUtf8(System.String)">
 <summary>
 Wandelt einen String aus der MySQL-Datenbank (Latin-1) in Utf-8.
 Abhängig vom Ländercode wird die Übersetzung aus der entsprechenden Code-Page vorgenommen
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.UTF8toMySql(System.String)">
 <summary>
 Wandelt einen String von Utf-8 nach Latin1 (Schreiben in MySql-Datenbank)
 Abhängig vom Ländercode wird die Übersetzung aus der entsprechenden Code-Page vorgenommen
 </summary>
 <param name="Value"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Functions.DoBatch(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Für ein Batch-File im Verzeichnis MySQLBatch aus. Über Argument wird %2 an das Batch-File übergeben
 </summary>
 <param name="Directory"></param>
 <param name="BatchFile"></param>
 <param name="Argument"></param>
 <param name="WaitUntilReady"></param>
</member>
<member name="M:WinBack.wb_Functions.DoBatch(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Für ein Batch-File im Verzeichnis MySQLBatch aus. Arg1/Arg2 werden als %2 und %3 an das Batch-File übergeben
 </summary>
 <param name="Directory"></param>
 <param name="BatchFile"></param>
 <param name="Arg1"></param>
 <param name="Arg2"></param>
 <param name="WaitUntilReady"></param>
</member>
<member name="M:WinBack.wb_Functions.DoShell(System.String,System.String,System.String,System.String)">
 <summary>
 Startet eine ssh-Sitzung und führt ein Kommando auf dem Linux-Rechner mit der angegebenen IP-Adresse aus
 </summary>
 <param name="User">String - Username</param>
 <param name="Pass">String - Passwort</param>
 <param name="Host">String - IP-Adresse</param>
 <param name="Command">String - Shell-Kommando</param>
 <returns>Ausgabe der Command-Shell</returns>
</member>
<member name="M:WinBack.wb_Functions.bz2CompressFile(System.String,System.String)">
 <summary>
 Datei komprimieren in .bz2
 Der File-Typ ist beliebig. Das Zielverzeichniss muss Schreib-Rechte haben. Nach erfolgreicher Operation wird
 True zurückgeliefert.
 </summary>
 <remarks>
 SharpZipLibrary samples
  Copyright (c) 2007, AlphaSierraPapa
  All rights reserved.
 
 ' Redistribution and use in source and binary forms, with or without modification, are
  permitted provided that the following conditions are met:
 
  - Redistributions of source code must retain the above copyright notice, this list
    of conditions and the following disclaimer.
 
  - Redistributions in binary form must reproduce the above copyright notice, this list
    of conditions and the following disclaimer in the documentation and/or other materials
    provided with the distribution.
 
  - Neither the name of the SharpDevelop team nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific prior written
    permission.
 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS
 OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 </remarks>
 <param name="InFileName"> String Dateiname und Pfad inlusive Extension</param>
 <param name="OutFileName"> String Dateiname und Pfad inlusive Extension (.bz2)</param>
 <returns>
 True - Komprimieren war erfolgreich
 False - Fehler beim Lesen/Schreiben
 </returns>
</member>
<member name="M:WinBack.wb_Functions.bz2DecompressFile(System.String,System.String)">
 <summary>
 Datei dekomprimieren aus .bz2
 Der File-Typ ist beliebig. Das Zielverzeichniss muss Schreib-Rechte haben. Nach erfolgreicher Operation wird
 True zurückgeliefert.
 </summary>
 <remarks>
 SharpZipLibrary samples
  Copyright (c) 2007, AlphaSierraPapa
  All rights reserved.
 
 ' Redistribution and use in source and binary forms, with or without modification, are
  permitted provided that the following conditions are met:
 
  - Redistributions of source code must retain the above copyright notice, this list
    of conditions and the following disclaimer.
 
  - Redistributions in binary form must reproduce the above copyright notice, this list
    of conditions and the following disclaimer in the documentation and/or other materials
    provided with the distribution.
 
  - Neither the name of the SharpDevelop team nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific prior written
    permission.
 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS
 OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 </remarks>
 <param name="InFileName"> String Dateiname und Pfad inlusive Extension (.bz2)</param>
 <param name="OutFileName"> String Dateiname und Pfad inlusive Extension</param>
 <returns>
 True - Dekomprimieren war erfolgreich
 False - Fehler beim Lesen/Schreiben/Dekomprimieren
 </returns>
</member>
<member name="T:WinBack.wb_Sql">
 <summary>
 Kapselt die Zugriffe auf die Datenbank
 wahlweise MySQl(winback) oder MSSQL(OrgasoftMain)
 </summary>
</member>
<member name="T:WinBack.wb_Sql.dbType">
 <summary>
 WinBack-Datenbank-Type (mysql/Microsoft-SQL)
 </summary>
</member>
<member name="T:WinBack.wb_Sql.dbTable">
 <summary>
 WinBack-Datenbanken
 </summary>
</member>
<member name="P:WinBack.wb_Sql.conType">
 <summary>
 Datenbank-Type
 </summary>
 <returns>MySql/MSSql</returns>
</member>
<member name="P:WinBack.wb_Sql.Read">
 <summary>
 Einen Datensatz lesen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Sql.sField(System.String)">
 <summary>
 Datenbankfeld als String auslesen
 </summary>
 <param name="FieldName">DB-Field-Name</param>
 <returns>String Datenfeld-Inhalt</returns>
</member>
<member name="P:WinBack.wb_Sql.dField(System.String)">
 <summary>
 Datenbankfeld als Datum auslesen
 </summary>
 <param name="FieldName"></param>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Sql.iField(System.String,System.Int32)">
 <summary>
 Datenbankfeld als Integer auslesen
 </summary>
 <param name="FieldName">DB-Field-Name</param>
 <returns>Integer Datenfeld-Inhalt</returns>
</member>
<member name="M:WinBack.wb_Sql.#ctor(System.String,WinBack.wb_Sql.dbType)">
 <summary>
 Constructor
 </summary>
 <param name="ConString">Verbindungs-String</param>
 <param name="db">DB-Type (MySQL/MSsql)</param>
</member>
<member name="M:WinBack.wb_Sql.sqlSelect(System.String)">
 <summary>
SQL-Select-Statement ausführen
 </summary>
 <param name="sql">Select-Statement</param>
 <returns>False im Fehlerfall</returns>
</member>
<member name="M:WinBack.wb_Sql.sqlCommand(System.String)">
 <summary>
 SQL-Kommando ausführen
 </summary>
 <param name="sql">SQL-Kommando</param>
 <returns>Anzahl der Datensätze
 -1 falls ein Fehler aufgetreten ist</returns>
</member>
<member name="M:WinBack.wb_Sql.CloseRead">
 <summary>
 SQL-Read beenden
 </summary>
</member>
<member name="M:WinBack.wb_Sql.Close">
 <summary>
Datenbank-Verbindung schliessen
 </summary>
</member>
<member name="T:WinBack.wb_IniFile">
 <summary>
 Lesen/Schreiben der ini-Datei. Der Datei-Name
 wird bei der Initialisierung festgelegt.
 
 Default: C:\ProgramData\OrgaSoft\WinBack.ini
 </summary>
</member>
<member name="M:WinBack.wb_IniFile.#ctor">
 <summary>
 Instanziiert die WinBack.ini-Klasse.
 Der Pfad wird automatisch festgelegt und bezieht sich auf das Programm-Verzeichnis. 
 Im Debug-Mode wird die WinBack.ini nach dem Übersetzen automatisch von 
     ..repos\Signum_WinBack in das \bin\debug\-Verzeichnis kopiert (Build-Ereignisse)
 </summary>
</member>
<member name="M:WinBack.wb_IniFile.#ctor(System.String)">
 <summary>
 Instanziiert die WinBack.ini-Klasse.
 Der Pfad wird als Argument mitgegeben 
 </summary>
 <param name="Pfad_der_ini">String - Pfad zur ini-Datei inklusive Datei-Name</param>
</member>
<member name="P:WinBack.wb_IniFile.SilentMode">
 <summary>
 Wird von Unit-Test auf True gesetzt. Unterdückt die Ausgabe von Fehlermeldungen.
 </summary>
</member>
<member name="P:WinBack.wb_IniFile.ReadResult">
 <summary>
 Wird von Unit-Test verwendet. Gibt das Ergebnis der Read-Funktion zurück
 </summary>
 <returns>Boolean - ReadResult. True wenn das Lesen erfolgreich war</returns>
</member>
<member name="P:WinBack.wb_IniFile.WriteResult">
 <summary>
 Gibt das Ergebnis der Write-Funktion zurück.
     True -  Wenn der Schlüssel gefunden wurde
     False - Wenn der Schlüssel nicht existiert.
 </summary>
 <returns>Boolean - Write-Result</returns>
</member>
<member name="M:WinBack.wb_IniFile.GetPrivateProfileString(System.String@,System.String@,System.String@,System.String@,System.Int32,System.String@)">
 <summary>
 Deklariert die dll-Funktion zum Lesen der ini-Datei
 </summary>
 <param name="lpApplicationName"></param>
 <param name="lpSchlüsselName"></param>
 <param name="lpDefault"></param>
 <param name="lpReturnedString"></param>
 <param name="nSize"></param>
 <param name="lpFileName"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_IniFile.TestIniPfadEmpty(System.String,System.String)">
 <summary>
 Deklariert die dll-Funktion zum Schreiben der ini-Datei
 </summary>
 <param name="Sektion"></param>
 <param name="Schlüssel"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_IniFile.TestIniPfadExists(System.String,System.String)">
 <summary>
 Prüft ob der Pfad zur ini-Datei existiert und ob die Datei vorhanden ist.
     True -  Datei und Pfad sind vorhanden.
     False - Datei/Pfad fehlen.
     
 Wenn SilentMode auf True gesetzt ist, wird keine Fehlermeldung ausgegeben.
 </summary>
 <param name="Sektion"></param>
 <param name="Schlüssel"></param>
 <returns>Boolean - Pfad/Datei vorhanden</returns>
</member>
<member name="M:WinBack.wb_IniFile.TestIniOrdnerExists(System.String,System.String)">
 <summary>
 Prüft ob der Pfad zur ini-Datei existiert.
     True -  Pfad ist vorhanden.
     False - Pfad ist nicht vorhanden.
     
 Wenn SilentMode auf True gesetzt ist, wird keine Fehlermeldung ausgegeben.
 </summary>
 <param name="Sektion"></param>
 <param name="Schlüssel"></param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_IniFile.DeleteIniFile">
 <summary>
 Wird von Unit-Test verwendet.
 ini-File löschen
 </summary>
</member>
<member name="M:WinBack.wb_IniFile.ReadString(System.String,System.String,System.String,System.Int32)">
 <summary>
 Liest einen String-Wert aus der ini-Datei unter dem übergebenen Schlüssel
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Standardwert">String - Defaultwert, wenn der Schlüssel nicht existiert</param>
 <param name="BufferSize">Integer - maximale Länge des Strings</param>
 <returns>String - Eintrag aus ini-File</returns>
</member>
<member name="M:WinBack.wb_IniFile.ReadEncryptedString(System.String,System.String,System.String,System.Int32)">
 <summary>
 Liest einen verschlüsselten String-Wert aus der ini-Datei unter dem übergebenen Schlüssel.
 Wenn der Wert nicht verschlüsselt ist, wird der Wert verschlüsselt und neu in die ini-Datei zurückgeschrieben, so dass
 beim nächsten Mal nur noch der verschlüsselte Wert verfügbar ist.
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Standardwert">String - Defaultwert, wenn der Schlüssel nicht existiert</param>
 <param name="BufferSize">Integer - maximale Länge des Strings</param>
 <returns>String - Eintrag aus ini-File</returns>
</member>
<member name="M:WinBack.wb_IniFile.ReadInt(System.String,System.String,System.Int32)">
 <summary>
 Liest einen Integer-Wert aus der ini-Datei unter dem übergebenen Schlüssel
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Standardwert">Integer - Defaultwert, wenn der Schlüssel nicht existiert</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_IniFile.ReadBool(System.String,System.String,System.Boolean)">
 <summary>
 Liest einen Boolean-Wert aus der ini-Datei unter dem übergebenen Schlüssel
 Der Wert wird als String in der ini-Datei abgelegt
     0 - False
     1 - True
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Standardwert">Boolean - Defaultwert, wenn der Schlüssel nicht existiert</param>
 <returns></returns>
</member>
<member name="M:WinBack.wb_IniFile.WriteString(System.String,System.String,System.String)">
 <summary>
 Schreibt einen String in die ini-Datei unter dem übergebenen Schlüssel.
 Wenn der Wert nicht geschrieben werden kann und SilentMode ist nicht gesetzt, wird eine Fehlermeldung ausgegeben.
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Wert">String - neuer Eintrag</param>
</member>
<member name="M:WinBack.wb_IniFile.WriteInt(System.String,System.String,System.Int32)">
 <summary>
 Schreibt einen Integer-Wert in die ini-Datei unter dem übergebenen Schlüssel.
 Wenn der Wert nicht geschrieben werden kann und SilentMode ist nicht gesetzt, wird eine Fehlermeldung ausgegeben.
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Wert">Integer - neuer Eintrag</param>
</member>
<member name="M:WinBack.wb_IniFile.WriteBool(System.String,System.String,System.Boolean)">
 <summary>
 Schreibt einen Boolschen Wert in die ini-Datei unter dem übergebenen Schlüssel.
 Wenn der Wert nicht geschrieben werden kann und SilentMode ist nicht gesetzt, wird eine Fehlermeldung ausgegeben.
 </summary>
 <param name="Sektion">String - Abschnitt in der ini-Datei</param>
 <param name="Schlüssel">String - Schlüssel innerhalb des Abschnitts</param>
 <param name="Wert">Bollean - neuer Eintrag</param>
</member>
<member name="T:WinBack.wb_Linien_Main">
 <summary>
 Anzeige der WinBack-Produktions-Linien über VNC-Viewr
 </summary>
</member>
<member name="P:WinBack.wb_Linien_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Linien_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_MainTemplate.#ctor(Signum.OrgaSoft.Common.IOrgasoftServiceProvider)">
 <summary>
 Konstruktor
 </summary>
 <param name="ServiceProvider">ServiceProvider von OrgaSoft.NET</param>
 <remarks></remarks>
</member>
<member name="M:WinBack.wb_MainTemplate.Init">
 <summary>
 Routine wird aufgerufen, wenn das Fenster geladen wurde und angezeigt werden soll
 </summary>
 <returns></returns>
 <remarks>Die Caption des Fensters muss mit MyBase.Text gesetzt werde</remarks>
</member>
<member name="M:WinBack.wb_MainTemplate.FormClosing(System.Int16)">
 <summary>
 Diese Function wird aufgerufen, wenn das Fenster geschlossen werden soll.
 </summary>
 <param name="Reason"></param>
 <returns>
 False, wenn das Fenster geschlossen werden darf
 True, wenn das Fenster geöffnet bleiben muss
 </returns>
 <remarks></remarks>
</member>
<member name="P:WinBack.wb_MainTemplate.FormKey">
 <summary>
 Eindeutiger Schlüssel für das Fenster, ggf. Firmenname.AddIn
 </summary>
</member>
<member name="P:WinBack.wb_MainTemplate.MinHeight">
 <summary>
 Minimale Höhe des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_MainTemplate.MinWidth">
 <summary>
 Minimale Breite des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_MainTemplate.Sizable">
 <summary>
 Gibt an, ob man die Größe dieses UserControls ändern darf
 </summary>
</member>
<member name="P:WinBack.wb_MainTemplate.Text">
 <summary>
 Bezeichnung und Caption des UserControls
 </summary>
</member>
<member name="P:WinBack.wb_MainTemplate.ContextTabs">
 <summary>
 Erzeugt neue Tabs im Ribbon-Control
 </summary>
</member>
<member name="T:WinBack.ob_Main_Menu">
 <summary>
 Erweitert das Ribon um ein neues Tab WinBack und baut die Menu-Struktur auf.
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.Initialize">
 <summary>
 Initialisierung Klasse
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.MyResolveEventHandler(System.Object,System.ResolveEventArgs)">
 <summary>
 MyResolveEventHandler
 </summary>
 <param name="sender"></param>
 <param name="args"></param>
 <returns></returns>
</member>
<member name="M:WinBack.ob_Main_Menu.AddLogIn">
 <summary>
 Event User-Login
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.AddMenu">
 <summary>
 Erzeugen Hauptmenu im Ribbon Orgasoft
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.AddTraceListener">
 <summary>
 alle Trace/Debug-Ausgaben werden auch in der Klasse wb_Admin_Shared in einer Text-Liste gespeichert.
 Nach x Zeilen werden die Einträge in ein Text-File gespeichert.
 Die Klasse xLogger (wb_Trace_Listener) leitet die Meldungen weiter.
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowArtikelForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Artikel
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowRohstoffForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Rohstoffe
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowRezeptForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Rezepte
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowUserForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Mitarbeiter
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowStammDatenForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Stammdaten
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowStatistikChargenForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Statistik Chargen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowStatistikRohstoffForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Statistik Rohstoffe
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowStatistikRezeptForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Statistik Rezepte
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowLinienForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Linien
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowProduktionsPlanungForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Produktions-Planung
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.ShowAdminAdministrationForm(System.Object,System.EventArgs)">
 <summary>
 Aufruf WinBack-Fenster Admin
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.CloseAllForms">
 <summary>
 alle noch offenen Fenster schliessen
 </summary>
</member>
<member name="M:WinBack.ob_Main_Menu.UserLogin(System.Object,System.EventArgs)">
 <summary>
 Event Login User in OrgaSoft
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.ob_Main_Menu.LanguageChange(System.Object,System.EventArgs)">
 <summary>
 Event Änderung der Sprache in OrgaSoft
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:WinBack.ob_Planung_DockingExtension.ContextTabs">
 <summary>
 Falls die Extension ein eigenes Context-Ribbon zum bestehenden Ribbon hinzufügen möchte, kann sie dieses hier zurückliefern
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Planung_DockingExtension.ExtendedType">
 <summary>
 Klasse, deren Docking-Layout erweitert werden soll (Produktion)
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Planung_DockingExtension.Extendee">
 <summary>
 Referenz auf die Framework-Klasse, die im Docking-Fenster derzeit angezeigt wird
 </summary>
</member>
<member name="M:WinBack.ob_Planung_DockingExtension.Initialize">
 <summary>
 Initialisierung des AddIns beim Starten von Orgasoft.
 </summary>
 <remarks>
 Achtung: Der FormController ist zu diesem Zeitpunkt noch nicht verfügbar!
 Dieser wird erst erzeugt und gesetzt, wenn das Fenster auch angezeigt werden soll.
 </remarks>
</member>
<member name="M:WinBack.ob_Planung_DockingExtension.ProvideInstance(System.String)">
 <summary>
 Liefert zu einem FormKey eine Instanz des UserControls zurück
 </summary>
 <param name="FormKey"></param>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Planung_DockingExtension.SubFormKeys">
 <summary>
 Liste aller FormKeys, für die das AddIn Unterfenster definiert
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.ob_Planung_DockingExtension.FormController">
 <summary>
 Liefert eine Instanz des FormControllers, über den das AddIn eigene Fenster öffnen und mit anderen Fenstern kommunizieren kann
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.ob_Planung_DockingExtension.InitializeContextTabs">
 <summary>
 Diese Routine wird immer aufgerufen, wenn ein DockingController vom passenden Typ erzeugt wird. 
 Hier können Einträge in die bestehenden Context-Tabs hinzugefügt werden. 
 Achtung: Das Hinzufügen darf nur beim ersten Mal passieren, die Context-Tabs werden gecached!
 </summary>
</member>
<member name="M:WinBack.wb_Planung_Liste.wb_Planung_Liste_Load(System.Object,System.EventArgs)">
 <summary>
 Abruf-Datum der Bestell-Liste von OrgaBack. Voreingestellt ist immer das aktuelle Datum plus x Tage
 Auswahl der Filiale aus Drop-Down-Liste. Die Liste wird aus den OrgaBack-Filialen mit Filialtyp Produktion erzeugt.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:WinBack.wb_Planung_Liste.btnNeueCharge_Click(System.Object,System.EventArgs)">
 <summary>
 Neue Artikel-Zeile (mit Rezeptur anlegen)
 TEST Artikel-Nummer 12
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="P:WinBack.wb_Planung_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Planung_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Planung_Main.GetOrderData">
 <summary>
 Ermittelt die Bestelldaten aus dem OrgaBack Backzettel
 </summary>
</member>
<member name="P:WinBack.wb_Admin_Main.FormText">
 <summary>
 Fenster-Name (Caption). Wird von Init() aufgerufen
 </summary>
 <returns></returns>
</member>
<member name="P:WinBack.wb_Admin_Main.FormName">
 <summary>
 Eindeutiger Name für die Basis-Form. 
 Unter diesem Namen werden die Einstellungen in der winback.ini gespeichert.
 
 Die DockPanel-Konfiguration wird gespeichert unter wbXXXXYYYY.xml, dabei ist XXXX der FormName und YYYY der Layout-Name.
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Admin_Datensicherung.Btn_DatenSicherung_Click(System.Object,System.EventArgs)">
 <summary>
 Datensicherung starten
 </summary>
</member>
<member name="M:WinBack.wb_Admin_Datensicherung.Btn_DatenRueckSicherung_Click(System.Object,System.EventArgs)">
 <summary>
 Daten-Rücksicherung starten
 </summary>
</member>
<member name="M:WinBack.wb_Admin_Datensicherung.wb_Admin_Datensicherung_Load(System.Object,System.EventArgs)">
 <summary>
 Laden des Formulars.
 Filename für Datensicherung und Daten-Rücksicherung aus winback.ini laden
 </summary>
</member>
<member name="M:WinBack.wb_Admin_Shared.#cctor">
 <summary>
 Beim Starten der Applikation wird das alte Log-File gelöscht.
 </summary>
</member>
<member name="P:WinBack.wb_Admin_Shared.LogEvents">
 <summary>
 Ausgeben alle (noch nicht gespeicherten Log-Events)
 </summary>
 <returns></returns>
</member>
<member name="M:WinBack.wb_Admin_Shared.GetTraceListenerText(System.String)">
 <summary>
 Hier landen alle Trace/Debug-Events
 </summary>
 <param name="Txt"></param>
</member>
<member name="M:WinBack.wb_Admin_Shared.WriteToEventLog(System.String,System.Diagnostics.EventLogEntryType,System.String)">
 <summary>
 Write Entry to Event Log using VB.NET
 NOTE: EventSources are tightly tied to their log. So don't use the same source name for different logs, and vice versa.
 </summary>
 <param name="Entry">Value to Write</param>
 <param name="EventType">Entry Type, from EventLogEntryType Structure e.g., EventLogEntryType.Warning, EventLogEntryType.Error</param>
 <param name="LogName">Name of Log (System, Application; Security is read-only) If you specify a non-existent log, the log will be created</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WinBack.wb_Admin_Sync.FindMatches(WinBack.wb_Sync@)">
 <summary>
 Prüft für alle Einträge im Grid, ob sich die Konflikte lösen lassen:
     -   SyncState.WinbackWrite
     -   SyncState.WinBackMiss
     -   SyncState.OrgaBackWrite
     -   SyncState.OrgaBackMiss
     
 Die Prüfung erfolgt über die Bezeichnungs-Spalte. Die Nummern sind schon über Excute Sync geprüft worden)
 </summary>
 <param name="wb"></param>
</member>
</members>
</doc>
